{"version":3,"sources":["logo.svg","serviceWorker.ts","models/types/UrlQueryParams.ts","models/constants/resources.ts","shared/Avatar/Avatar.tsx","components/Chat/Card/Meta/ChatCardMeta.tsx","components/Chat/Card/Message/ChatCardMessage.tsx","helpers/dateHelper.ts","components/Chat/Card/ChatCard.tsx","components/Chat/List/ChatList.tsx","models/entities/Parser.ts","models/constants/QUERY_PATTERN.ts","helpers/queryParser.ts","shared/WithQueryFromUrl/WithQuery.tsx","models/enums/MessageTypes.ts","helpers/MockState/mockStateHelpers.ts","helpers/MockState/mockStateFactories.ts","services/sessionService.ts","helpers/MockState/MockStateStorage.ts","helpers/MockState/MockService.ts","helpers/utils.ts","helpers/mapperHelper.ts","services/chatService.ts","components/Main/Sidebar/MainSidebar.tsx","components/Chat/MessageWrapper/ChatMessageWrapper.tsx","components/Chat/ServiceMessage/ChatServiceMessage.tsx","components/Chat/TextMessage/ChatTextMessage.tsx","components/Chat/History/ChatHistory.tsx","components/Chat/MessageBox/ChatMessageBox.tsx","helpers/history.ts","components/Main/Content/Layout/MainContentLayout.tsx","shared/WithPreload/WithPreload.tsx","models/types/AuthFormFields.ts","models/types/StringParams.ts","components/Chat/EmptyPage/ChatEmptyPage.tsx","components/Main/Content/MainContent.tsx","components/Main/Layout/MainLayout.tsx","components/Core/Auth/Auth.tsx","shared/ProtectedRoute/ProtectedRoute.tsx","services/authSevice.ts","models/constants/NAME_PATTERN.ts","models/constants/PASSWORD_PATTERN.ts","App.tsx","index.tsx"],"names":["module","exports","Boolean","window","location","hostname","match","UrlQueryParams","resources","cardIcon","messageAuthor","default","serviceMessage","messageWrap","actions","signIn","signUp","validation","required","forbiddenFieldThreeChars","forbiddenFieldEightChars","Avatar","className","src","alt","ChatCardMeta","chatName","lastMessageDate","ChatCardMessage","author","message","formatUnit","n","removeTimeFromTimestamp","d","Date","setHours","ChatCard","logo","name","lastMessage","isSelected","messageDate","date","day","getDate","month","getMonth","year","getFullYear","timestamp","content","ChatList","chatList","selectedChat","map","item","guid","to","chatId","key","Parser","dictionary","pattern","str","Map","this","exec","regExpArr","value","set","QUERY_PATTERN","RegExp","queryParser","WithQuery","ChildComponent","props","query","execute","search","get","dataId","MessageTypes","randomInteger","max","rand","Math","random","floor","storageAssembler","keys","factory","reduce","acc","i","messagesFactoryWrapper","messages","users","contentStorage","authorIds","start","end","messagesNumber","length","uuid","authorId","getTime","isChained","push","type","Text","messagesFactory","setIsAuthorized","sessionStorage","setItem","JSON","stringify","setUserData","user","getUserData","data","getItem","parse","MockStateStorage","userStorage","chatStorage","messageStorage","init","id","authData","Object","values","filter","u","login","password","chatNames","chatGuids","usernames","initializeStorage","initMockUser","index","avatar","userFactoryWrapper","chatInfoFactoryWrapper","mockService","storage","chats","getChats","getMessages","chatInfo","mapToChatInfo","Promise","resolve","messageList","getChatHistoryByChatId","m","mapToMessage","dto","rest","addMessage","addUser","userDto","getUser","reject","getUserById","chat","chatMessages","addServiceMessageToChatHistory","dateSet","Set","has","add","Service","isTextMessageChained","current","prev","isSameAuthor","isSameDate","mapTextMessageDtoToTextMessage","arr","prevMessage","maptTextMessageDtoToTextMessage","sendMessagetoChat","maptMessageToTextMessageDto","then","res","MainSidebar","state","getChatList","setState","console","error","sort","a","b","sortedChatList","getSortedChatList","Component","MainSidebarWithQuery","withRouter","ChatMessageWrapper","children","ChatServiceMessage","toDateString","ChatTextMessage","hours","getHours","minutes","getMinutes","seconds","getSeconds","ChatHistory","ChatMessageBox","onChange","e","target","onSubmit","preventDefault","submit","onKeyDown","keyCode","shiftKey","onSend","htmlFor","history","createHashHistory","navigate","provider","AuthFormFields","StringParams","MainContentLayout","onChatClosed","trim","prevState","concat","onClick","withPreload","dtoList","isLoading","preload","prevProp","preloadedData","withQuery","MainContentLayoutWithRouterAndQueryAndPreload","ChatEmptyPage","MainContentWithQuery","MainLayout","Auth","validateLogin","validatePassword","errors","validate","LOGIN","PASSWORD","filed","onBlur","field","replace","FIELD","loginPattern","test","passwordPattern","action","ProtectedRoute","component","render","getIsAuthorized","NAME_PATTERN","PASSWORD_PATTERN","App","exact","path","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.a835b741.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export enum UrlQueryParams {\r\n  chatId = 'chatId'\r\n}\r\n","/* eslint-disable max-len */\r\nexport const resources = {\r\n  avatar: {\r\n    cardIcon: 'Chat icon',\r\n    messageAuthor: 'Author avatar',\r\n    default: 'Avatar',\r\n  },\r\n  messages: {\r\n    serviceMessage: 'service-message',\r\n    messageWrap: 'message-wrap',\r\n  },\r\n  auth: {\r\n    actions: {\r\n      signIn: 'Sign In',\r\n      signUp: 'Sign Up',\r\n    },\r\n    validation: {\r\n      required: '{{FIELD}} is required',\r\n      forbiddenFieldThreeChars: 'Forbidden {{FIELD}}. {{FIELD}} must contain minimum three characters: letters, numbers, hyphen or underscore',\r\n      forbiddenFieldEightChars: 'Forbidden {{FIELD}}. {{FIELD}} must contain minimum eight characters, at least one uppercase letter, one lowercase letter, one number and one special character',\r\n    },\r\n  },\r\n};\r\n","import React, { FunctionComponent } from 'react';\n\nimport { AvatarProps } from './AvatarProps';\n\nimport { resources } from '../../models/constants/resources';\n\nimport './Avatar.css';\n\nexport const Avatar: FunctionComponent<AvatarProps> = ({\n  className,\n  src,\n  alt = resources.avatar.default,\n}: AvatarProps) => (\n  <div className={className}>\n    <img src={src} alt={alt} />\n  </div>\n);\n","import React, { FunctionComponent } from 'react';\n\nimport { IChatCardMetaProps } from './IChatCardMetaProps';\n\nimport './ChatCardMeta.css';\n\nexport const ChatCardMeta: FunctionComponent<IChatCardMetaProps> = ({ chatName, lastMessageDate }: IChatCardMetaProps) => (\n  <div className=\"card-meta\">\n    <div className=\"card-meta__name\">\n      <span>{chatName}</span>\n    </div>\n    <div className=\"card-meta__date\">\n      <span>{lastMessageDate}</span>\n    </div>\n  </div>\n);\n","import React, { FunctionComponent } from 'react';\n\nimport { IChatCardMessageProps } from './IChatCardMessageProps';\n\nimport './ChatCardMessage.css';\n\nexport const ChatCardMessage: FunctionComponent<IChatCardMessageProps> = ({ author, message }: IChatCardMessageProps) => (\n  <div className=\"card-message\">\n    <span className=\"card-message__author\">\n      {author}\n      :\n    </span>\n    <span className=\"card-message__content\">{message}</span>\n  </div>\n);\n","const formatUnit = (n: number) => {\r\n  return n >= 10 ? n : `0${n}`;\r\n};\r\n\r\nexport const getDate = (d: Date | number) => {\r\n  const date = new Date(d);\r\n  const day = formatUnit(date.getDate());\r\n  const month = formatUnit(date.getMonth() + 1);\r\n  const year = formatUnit(date.getFullYear());\r\n  return `${day}/${month}/${year}`;\r\n};\r\n\r\nexport const getTime = (d: Date | number) => {\r\n  const date = new Date(d);\r\n  const hours = formatUnit(date.getHours());\r\n  const minutes = formatUnit(date.getMinutes());\r\n  const seconds = formatUnit(date.getSeconds());\r\n  return `${hours}:${minutes}:${seconds}`;\r\n};\r\n\r\nexport const removeTimeFromTimestamp = (d: number | Date) => {\r\n  const date = new Date(d);\r\n  return date.setHours(0, 0, 0, 0);\r\n};\r\n\r\nexport const getServiceMessage = (d: number | Date) => {\r\n  const date = new Date(d);\r\n  return date.toDateString();\r\n};\r\n","import React, { FC } from 'react';\n\nimport { Avatar } from '../../../shared/Avatar/Avatar';\n\nimport { IChatCardProps } from './IChatCardProps';\nimport { ChatCardMeta } from './Meta/ChatCardMeta';\nimport { ChatCardMessage } from './Message/ChatCardMessage';\n\nimport { getDate } from '../../../helpers/dateHelper';\nimport { resources } from '../../../models/constants/resources';\n\nimport './ChatCard.css';\n\nexport const ChatCard: FC<IChatCardProps> = ({\n  logo,\n  name,\n  lastMessage,\n  isSelected,\n}: IChatCardProps) => {\n  const messageDate = getDate(lastMessage.timestamp);\n  return (\n    <div className={`card-wrap ${isSelected ? 'selected' : ''}`}>\n      <section className=\"card\">\n        <section className=\"card__body\">\n          <Avatar className=\"card__logo\" src={logo} alt={resources.avatar.cardIcon} />\n          <section className=\"card__info\">\n            <ChatCardMeta chatName={name} lastMessageDate={messageDate} />\n            <ChatCardMessage author={lastMessage.author.name} message={lastMessage.content} />\n          </section>\n        </section>\n      </section>\n    </div>\n  );\n};\n","import React, { FC } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport { ChatCard } from '../Card/ChatCard';\n\nimport { IChatListProps } from './IChatListProps';\nimport { UrlQueryParams } from '../../../models/types/UrlQueryParams';\n\nexport const ChatList: FC<IChatListProps> = ({ chatList, selectedChat }: IChatListProps) => (\n  <section>\n    {chatList.map((item) => {\n      const isSelected = selectedChat === item.guid;\n      return (\n        <Link className=\"link-reset\" to={`/chat?${UrlQueryParams.chatId}=${item.guid}`} key={item.guid}>\n          <ChatCard {...item} isSelected={isSelected} />\n        </Link>\n      );\n    })}\n  </section>\n);\n","/* eslint-disable no-empty-function */\r\n/* eslint-disable no-useless-constructor */\r\n\r\nimport { IHashTable } from '../interfaces/IHashTable';\r\n\r\nexport class Parser<T> {\r\n  constructor(\r\n    private dictionary: IHashTable<T>,\r\n    private pattern: RegExp,\r\n  ) { }\r\n\r\n  public execute(str: string): Map<T, string> {\r\n    const map: Map<T, string> = new Map();\r\n    for (let match = this.pattern.exec(str); match !== null; match = this.pattern.exec(str)) {\r\n      if (this.dictionary[match[0]]) {\r\n        const regExpArr = this.pattern.exec(str);\r\n        const value = regExpArr?.[0] ?? '';\r\n        map.set(this.dictionary[match[0]], value);\r\n      }\r\n    }\r\n    return map;\r\n  }\r\n}\r\n","export const QUERY_PATTERN = new RegExp(/[^?=&]+/g);\r\n","import { Parser } from '../models/entities/Parser';\r\n\r\nimport { UrlQueryParams } from '../models/types/UrlQueryParams';\r\nimport { QUERY_PATTERN } from '../models/constants/QUERY_PATTERN';\r\n\r\nexport const queryParser = new Parser<UrlQueryParams>(UrlQueryParams, QUERY_PATTERN);\r\n","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport React, { ComponentType } from 'react';\n\nimport { IWithQueryFromUrlInjectedProps } from './IWithQueryFromUrlInjectedProps';\nimport { WithQueryFromUrlProps } from './WithQueryFromUrlProps';\nimport { WithQueryChildProps } from './WithQueryChildProps';\nimport { UrlQueryParams } from '../../models/types/UrlQueryParams';\n\nimport { queryParser } from '../../helpers/queryParser';\n\nexport function WithQuery(key: UrlQueryParams) {\n  return <PropsType extends IWithQueryFromUrlInjectedProps>(ChildComponent: ComponentType<PropsType>) => {\n    return (props: WithQueryFromUrlProps<PropsType>) => {\n      const { location } = props;\n      const queryMap = queryParser.execute(location?.search ?? '');\n      const query = queryMap.get(key);\n      return <ChildComponent dataId={query} {...props as WithQueryChildProps<PropsType>} />;\n    };\n  };\n}\n","export enum MessageTypes {\r\n  Service,\r\n  Text,\r\n}\r\n","export function randomInteger(max: number) {\n  const rand = 1 + Math.random() * (max);\n  return Math.floor(rand);\n}\n\nexport function randomDate(start: Date, end: Date) {\n  return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime())).getTime();\n}\n","import { v4 as uuid } from 'uuid';\r\n\r\nimport { IMockMessage } from './interfaces/IMockMessage';\r\nimport { MessageTypes } from '../../models/enums/MessageTypes';\r\nimport { IHashTable } from '../../models/interfaces/IHashTable';\r\n\r\nimport { randomInteger, randomDate } from './mockStateHelpers';\r\n\r\nimport logo from '../../logo.svg';\r\n\r\nexport function messagesFactory(contentStorage: string[], authorIds: string[]): IMockMessage[] {\r\n  const messagesNumber = randomInteger(contentStorage.length - 1);\r\n  const messages: IMockMessage[] = [];\r\n  for (let i = 0; i <= messagesNumber; i += 1) {\r\n    const guid = uuid();\r\n    const authorId = authorIds[randomInteger(authorIds.length - 1)];\r\n    const content = contentStorage[randomInteger(contentStorage.length - 1)];\r\n    const timestamp = randomDate(new Date(2020, 0, 1), new Date());\r\n    const isChained = !!randomInteger(1);\r\n    messages.push({\r\n      guid,\r\n      authorId,\r\n      content,\r\n      timestamp,\r\n      type: MessageTypes.Text,\r\n    });\r\n    if (isChained) {\r\n      messages.push({\r\n        guid: uuid(),\r\n        authorId,\r\n        content: contentStorage[randomInteger(contentStorage.length - 1)],\r\n        timestamp: timestamp + randomInteger(1200000),\r\n        type: MessageTypes.Text,\r\n      });\r\n    }\r\n  }\r\n  return messages;\r\n}\r\n\r\nexport function storageAssembler<T>(keys: string[], factory: (k: string, i: number) => T): IHashTable<T> {\r\n  return keys.reduce((acc: IHashTable<T>, key, i) => {\r\n    acc[key] = factory(key, i);\r\n    return acc;\r\n  }, {});\r\n}\r\n\r\nexport function userFactoryWrapper(usernames: string[]) {\r\n  return (guid: string, index: number) => ({\r\n    guid,\r\n    name: usernames[index],\r\n    avatar: logo,\r\n  });\r\n}\r\n\r\nexport function chatInfoFactoryWrapper(chatNames: string[]) {\r\n  return (guid: string, index: number) => ({\r\n    guid,\r\n    name: chatNames[index],\r\n    logo,\r\n  });\r\n}\r\n\r\nexport function messagesFactoryWrapper(messages: string[], users: string[]) {\r\n  return () => messagesFactory(messages, users);\r\n}\r\n","import { IUser } from \"../models/interfaces/IUser\";\r\n\r\nexport const getIsAuthorized = (): boolean | null => {\r\n  const data = sessionStorage.getItem('isAuthorized');\r\n  if (data !== null) {\r\n    return JSON.parse(data);\r\n  }\r\n  return data;\r\n};\r\n\r\nexport const setIsAuthorized = () => {\r\n  sessionStorage.setItem('isAuthorized', JSON.stringify(true));\r\n};\r\n\r\nexport const setUserData = (user: IUser) => {\r\n  sessionStorage.setItem('user', JSON.stringify(user));\r\n};\r\n\r\nexport const getUserData = (): IUser | null => {\r\n  const data = sessionStorage.getItem('user');\r\n  if (data !== null) {\r\n    return JSON.parse(data);\r\n  }\r\n  return data;\r\n};\r\n","import { v4 as uuid } from 'uuid';\n\nimport dictionary from './mockStateDictionary.json';\n\nimport { IHashTable } from '../../models/interfaces/IHashTable';\nimport { IMockChatInfo } from './interfaces/IMockChatInfo';\nimport { IMockMessage } from './interfaces/IMockMessage';\nimport { IUser } from '../../models/interfaces/IUser';\nimport { IStorage } from './interfaces/IStorage';\nimport { IMockUser } from './interfaces/IMockUser';\nimport { IAuthData } from '../../models/interfaces/IAuthData';\n\nimport {\n  storageAssembler,\n  userFactoryWrapper,\n  chatInfoFactoryWrapper,\n  messagesFactoryWrapper,\n} from './mockStateFactories';\nimport { getUserData } from '../../services/sessionService';\n\nexport class MockStateStorage implements IStorage {\n  private userStorage: IHashTable<IMockUser> = {};\n  private chatStorage: IHashTable<IMockChatInfo> = {};\n  private messageStorage: IHashTable<IMockMessage[]> = {};\n\n  constructor() {\n    this.init();\n  }\n\n  getUserById(id: string) {\n    return this.userStorage[id];\n  }\n\n  getChats() {\n    return this.chatStorage;\n  }\n\n  getMessages() {\n    return this.messageStorage;\n  }\n\n  getChatHistoryByChatId(id: string) {\n    return this.messageStorage[id];\n  }\n\n  addMessage(chatId: string, message: IMockMessage) {\n    this.messageStorage[chatId].push(message);\n  }\n\n  addUser(user: IMockUser) {\n    this.userStorage[user.guid] = user;\n  }\n\n  getUser(authData: IAuthData): IMockUser | null {\n    const user = Object.values(this.userStorage).filter((u) => u.name === authData.login)[0];\n    if (user && user.password === authData.password) {\n      return user;\n    }\n    return null;\n  }\n\n  private init() {\n    const {\n      chatNames,\n      chatGuids,\n      usernames,\n      messages,\n    } = dictionary;\n    this.initializeStorage(chatNames, chatGuids, usernames, messages);\n    this.initMockUser();\n  }\n\n  private initializeStorage(chatNames: string[], chatGuids: string[], usernames: string[], messages: string[]) {\n    this.userStorage = storageAssembler<IUser>(usernames.map(() => uuid()), userFactoryWrapper(usernames));\n    this.chatStorage = storageAssembler<IMockChatInfo>(chatGuids, chatInfoFactoryWrapper(chatNames));\n    this.messageStorage = storageAssembler<IMockMessage[]>(\n      chatGuids,\n      messagesFactoryWrapper(messages, Object.keys(this.userStorage)),\n    );\n  }\n\n  private initMockUser() {\n    const user = getUserData();\n    if (user) {\n      this.userStorage[user.guid] = user;\n    }\n  }\n}\n","/* eslint-disable no-useless-constructor */\r\n/* eslint-disable no-empty-function */\r\nimport { v4 as uuid } from 'uuid';\r\n\r\nimport { MockStateStorage } from './MockStateStorage';\r\nimport { IChatInfo } from '../../models/interfaces/IChatInfo';\r\nimport { IMockChatInfo } from './interfaces/IMockChatInfo';\r\nimport { IHashTable } from '../../models/interfaces/IHashTable';\r\nimport { IMockMessage } from './interfaces/IMockMessage';\r\nimport { ITextMessageDto } from '../../models/interfaces/IMessage';\r\nimport { IStorage } from './interfaces/IStorage';\r\nimport { IAuthData } from '../../models/interfaces/IAuthData';\r\nimport { IUser } from '../../models/interfaces/IUser';\r\nimport { IMockUser } from './interfaces/IMockUser';\r\n\r\nimport avatar from '../../logo.svg';\r\n\r\nclass MockService {\r\n  constructor(private storage: IStorage) { }\r\n\r\n  getChatList(): Promise<IChatInfo[]> {\r\n    const chats = this.storage.getChats();\r\n    const messages = this.storage.getMessages();\r\n    const chatInfo: IChatInfo[] = this.mapToChatInfo(chats, messages);\r\n    return Promise.resolve(chatInfo);\r\n  }\r\n\r\n  getChatHistoryByChatId(chatId: string): Promise<ITextMessageDto[]> {\r\n    const history = this.storage.getChatHistoryByChatId(chatId);\r\n    const messageList = history.map((m) => this.mapToMessage(m));\r\n    return Promise.resolve(messageList);\r\n  }\r\n\r\n  sendMessagetoChat(chatId: string, dto: ITextMessageDto): Promise<ITextMessageDto> {\r\n    const { author, ...rest } = dto;\r\n    const message: IMockMessage = { ...rest, authorId: author.guid };\r\n    this.storage.addMessage(chatId, message);\r\n    return Promise.resolve(this.mapToMessage(message));\r\n  }\r\n\r\n  signUp(dto: IAuthData): Promise<IUser> {\r\n    const user: IMockUser = {\r\n      guid: uuid(),\r\n      avatar,\r\n      name: dto.login,\r\n      password: dto.password,\r\n    };\r\n    this.storage.addUser(user);\r\n    const { password, ...userDto } = user;\r\n    return Promise.resolve(userDto);\r\n  }\r\n\r\n  signIn(dto: IAuthData): Promise<IUser> {\r\n    const user = this.storage.getUser(dto);\r\n    if (user) {\r\n      const { password, ...userDto } = user;\r\n      return Promise.resolve(userDto);\r\n    }\r\n    return Promise.reject();\r\n  }\r\n\r\n  private mapToMessage(m: IMockMessage): ITextMessageDto {\r\n    const { authorId, ...lastMessage } = m;\r\n    return { ...lastMessage, author: this.storage.getUserById(authorId) };\r\n  }\r\n\r\n  private mapToChatInfo(\r\n    chats: IHashTable<IMockChatInfo>,\r\n    messages: IHashTable<IMockMessage[]>,\r\n  ): IChatInfo[] {\r\n    return Object.keys(chats)\r\n      .map((chatId) => {\r\n        const chat = chats[chatId];\r\n        const chatMessages = messages[chat.guid];\r\n        const { authorId, ...lastMessage } = chatMessages[chatMessages.length - 1];\r\n        return {\r\n          ...chat,\r\n          lastMessage: {\r\n            ...lastMessage,\r\n            author: this.storage.getUserById(authorId),\r\n          },\r\n        };\r\n      });\r\n  }\r\n}\r\n\r\nexport const mockService = new MockService(new MockStateStorage());\r\n","import { v4 as uuid } from 'uuid';\r\n\r\nimport { ITextMessage } from '../models/interfaces/IMessage';\r\nimport { MessageList } from '../models/types/MessageList';\r\nimport { MessageTypes } from '../models/enums/MessageTypes';\r\nimport { Message } from '../models/types/Message';\r\n\r\nimport { removeTimeFromTimestamp } from './dateHelper';\r\n\r\nexport const addServiceMessageToChatHistory = (messageList: ITextMessage[]): MessageList => {\r\n  const dateSet: Set<number> = new Set();\r\n  return messageList.reduce((acc: MessageList, m) => {\r\n    const timestamp = removeTimeFromTimestamp(m.timestamp);\r\n    if (!dateSet.has(timestamp)) {\r\n      dateSet.add(timestamp);\r\n      acc.push({\r\n        guid: uuid(),\r\n        timestamp,\r\n        type: MessageTypes.Service,\r\n      });\r\n    }\r\n    acc.push(m);\r\n    return acc;\r\n  }, []);\r\n};\r\n\r\nexport const isTextMessageChained = (current: ITextMessage, prev: Message): ITextMessage => {\r\n  const isSameAuthor = prev?.type !== MessageTypes.Service && prev?.author.guid === current.author.guid;\r\n  const isSameDate = removeTimeFromTimestamp(prev?.timestamp) === removeTimeFromTimestamp(current.timestamp);\r\n  if (isSameAuthor && isSameDate) {\r\n    return { ...current, isChained: true };\r\n  }\r\n  return { ...current, isChained: false };\r\n};\r\n","import { v4 as uuid } from 'uuid';\r\n\r\nimport { ITextMessageDto, ITextMessage } from '../models/interfaces/IMessage';\r\n\r\nimport { MessageTypes } from '../models/enums/MessageTypes';\r\nimport { IUser } from '../models/interfaces/IUser';\r\nimport { MessageList } from '../models/types/MessageList';\r\nimport { isTextMessageChained } from './utils';\r\n\r\nexport const mapTextMessageDtoToTextMessage = (arr: MessageList): MessageList => {\r\n  return arr.map((m, i) => {\r\n    if (m.type === MessageTypes.Text) {\r\n      const prevMessage = arr[i - 1];\r\n      return isTextMessageChained(m, prevMessage);\r\n    }\r\n    return m;\r\n  });\r\n};\r\n\r\nexport const maptMessageToTextMessageDto = (content: string, author: IUser): ITextMessageDto => {\r\n  return {\r\n    content,\r\n    author,\r\n    timestamp: new Date().getTime(),\r\n    guid: uuid(),\r\n    type: MessageTypes.Text,\r\n  };\r\n};\r\n\r\nexport const maptTextMessageDtoToTextMessage = (dto: ITextMessageDto): ITextMessage => {\r\n  return {\r\n    content: dto.content,\r\n    author: dto.author,\r\n    timestamp: dto.timestamp,\r\n    guid: dto.guid,\r\n    type: MessageTypes.Text,\r\n    isChained: false,\r\n  };\r\n};\r\n","import { mockService } from '../helpers/MockState/MockService';\r\nimport { addServiceMessageToChatHistory } from '../helpers/utils';\r\nimport { mapTextMessageDtoToTextMessage, maptMessageToTextMessageDto, maptTextMessageDtoToTextMessage } from '../helpers/mapperHelper';\r\nimport { ITextMessage } from '../models/interfaces/IMessage';\r\nimport { getUserData } from './sessionService';\r\nimport { MessageList } from '../models/types/MessageList';\r\nimport { IChatInfo } from '../models/interfaces/IChatInfo';\r\n\r\nexport const getChatList = (): Promise<IChatInfo[]> => {\r\n  return mockService.getChatList();\r\n};\r\n\r\nexport const getChatHistoryByChatId = (chatId: string): Promise<MessageList> => {\r\n  return mockService.getChatHistoryByChatId(chatId)\r\n    .then((dtoList) => dtoList.map((dto) => maptTextMessageDtoToTextMessage(dto)))\r\n    .then(addServiceMessageToChatHistory)\r\n    .then(mapTextMessageDtoToTextMessage);\r\n};\r\n\r\nexport const sendMessagetoChat = (chatId: string, content: string): Promise<ITextMessage> => {\r\n  const user = getUserData();\r\n  if (user) {\r\n    const dto = maptMessageToTextMessageDto(content, user);\r\n    return mockService.sendMessagetoChat(chatId, dto)\r\n      .then((res) => maptTextMessageDtoToTextMessage(res));\r\n  }\r\n  return Promise.reject();\r\n};\r\n","import React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\n\nimport { ChatList } from '../../Chat/List/ChatList';\nimport { WithQuery } from '../../../shared/WithQueryFromUrl/WithQuery';\n\nimport { IMainSidebarState } from './IMainSidebarState';\nimport { UrlQueryParams } from '../../../models/types/UrlQueryParams';\nimport { IWithQueryFromUrlInjectedProps } from '../../../shared/WithQueryFromUrl/IWithQueryFromUrlInjectedProps';\n\nimport { getChatList } from '../../../services/chatService';\n\nimport './MainSidebar.css';\n\nexport class MainSidebar extends Component<IWithQueryFromUrlInjectedProps, IMainSidebarState> {\n  constructor(props: IWithQueryFromUrlInjectedProps) {\n    super(props);\n    this.state = {\n      chatList: [],\n    };\n  }\n\n  async componentDidMount() {\n    try {\n      const chatList = await getChatList();\n      this.setState({\n        chatList,\n      });\n    } catch (err) {\n      console.error(err);\n    }\n  }\n\n\n  private getSortedChatList() {\n    const { chatList } = this.state;\n    return chatList.sort((a, b) => a.lastMessage.timestamp - b.lastMessage.timestamp);\n  }\n\n  render() {\n    const sortedChatList = this.getSortedChatList();\n    const { dataId } = this.props;\n    return (\n      <aside className={`sidebar ${dataId ? 'hidden' : 'displayed'}`}>\n        <ChatList selectedChat={dataId} chatList={sortedChatList} />\n      </aside>\n    );\n  }\n}\n\nexport const MainSidebarWithQuery = withRouter(WithQuery(UrlQueryParams.chatId)(MainSidebar));\n","import React, { FunctionComponent } from 'react';\n\nimport { IChatMessageWrapperProps } from './IChatMessageWrapperProps';\n\nimport { resources } from '../../../models/constants/resources';\n\nimport './ChatMessageWrapper.css';\n\nexport const ChatMessageWrapper: FunctionComponent<IChatMessageWrapperProps> = ({\n  className = resources.messages.messageWrap,\n  children,\n}: IChatMessageWrapperProps) => (\n  <div className={className}>\n    {children}\n  </div>\n);\n","import React, { FunctionComponent } from 'react';\n\nimport { ChatMessageWrapper } from '../MessageWrapper/ChatMessageWrapper';\n\nimport { IServiceMessage } from '../../../models/interfaces/IMessage';\n\nimport { getServiceMessage } from '../../../helpers/dateHelper';\nimport { resources } from '../../../models/constants/resources';\n\nimport './ChatServiceMessage.css';\n\nexport const ChatServiceMessage: FunctionComponent<IServiceMessage> = ({ timestamp }: IServiceMessage) => (\n  <ChatMessageWrapper className={resources.messages.serviceMessage}>\n    <span className=\"service-message__date\">{getServiceMessage(timestamp)}</span>\n  </ChatMessageWrapper>\n);\n","import React, { FunctionComponent } from 'react';\n\nimport { Avatar } from '../../../shared/Avatar/Avatar';\nimport { ChatMessageWrapper } from '../MessageWrapper/ChatMessageWrapper';\n\nimport { ITextMessage } from '../../../models/interfaces/IMessage';\n\nimport { resources } from '../../../models/constants/resources';\nimport { getTime } from '../../../helpers/dateHelper';\n\nimport './ChatTextMessage.css';\n\nexport const ChatTextMessage: FunctionComponent<ITextMessage> = ({\n  author,\n  content,\n  timestamp,\n  isChained,\n}: ITextMessage) => (\n  <ChatMessageWrapper>\n    <section className={`message ${isChained ? 'chained' : ''}`}>\n      <Avatar className=\"message__icon\" src={author.avatar} alt={resources.avatar.messageAuthor} />\n      <div className=\"message__body\">\n        <span className=\"message__author\">{author.name}</span>\n        <div className=\"message__content\">\n          <span>{content}</span>\n        </div>\n      </div>\n      <div className=\"message__time\">\n        <span>{getTime(timestamp)}</span>\n      </div>\n    </section>\n  </ChatMessageWrapper>\n);\n","import React, { FC } from 'react';\n\nimport { ChatServiceMessage } from '../ServiceMessage/ChatServiceMessage';\nimport { ChatTextMessage } from '../TextMessage/ChatTextMessage';\n\nimport { IChatHistoryProps } from './IChatHistoryProps';\nimport { MessageTypes } from '../../../models/enums/MessageTypes';\n\nimport './ChatHistory.css';\n\nexport const ChatHistory: FC<IChatHistoryProps> = ({ messageList }: IChatHistoryProps) => (\n  <div className=\"message-history\">\n    {(messageList || []).map((message) => {\n      switch (message.type) {\n        case MessageTypes.Service:\n          return <ChatServiceMessage key={message.guid} {...message} />;\n        case MessageTypes.Text:\n        default:\n          return <ChatTextMessage key={message.guid} {...message} />;\n      }\n    })}\n  </div>\n);\n","import React, { Component, ChangeEvent, FormEvent } from 'react';\n\nimport { IChatMessageBoxProps } from './IChatMessageBoxProps';\nimport { IChatMessageBoxState } from './IChatMessageBoxState';\n\nimport './ChatMessageBox.css';\n\nexport class ChatMessageBox extends Component<IChatMessageBoxProps, IChatMessageBoxState> {\n  constructor(props: IChatMessageBoxProps) {\n    super(props);\n    this.state = {\n      content: '',\n    };\n  }\n\n  private onChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\n    const { value } = e.target;\n    this.setState(() => ({ content: value }));\n  }\n\n  private onSubmit = (e: FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    this.submit();\n  }\n\n  private onKeyDown = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {\n    if (e.keyCode === 13 && !e.shiftKey) {\n      e.preventDefault();\n      this.submit();\n    }\n  }\n\n  private submit() {\n    const { content } = this.state;\n    const { onSend } = this.props;\n    onSend(content);\n    this.setState(() => ({ content: '' }));\n  }\n\n  render() {\n    const { content } = this.state;\n    return (\n      <div className=\"message-box-wrap\">\n        <form onSubmit={this.onSubmit} className=\"message-box\">\n          <label className=\"message-box-label\" htmlFor=\"control\">\n            <textarea className=\"message-box-control\" id=\"control\" value={content} onChange={this.onChange} onKeyDown={this.onKeyDown} />\n          </label>\n          <button type=\"submit\">SEND</button>\n        </form>\n      </div>\n    );\n  }\n}\n","import { createHashHistory } from 'history';\n\nexport const history = createHashHistory();\n\nexport function navigate(location: string) {\n  history.push(location);\n}\n","import React, { Component } from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\n\r\nimport { ChatHistory } from '../../../Chat/History/ChatHistory';\r\nimport { WithQuery } from '../../../../shared/WithQueryFromUrl/WithQuery';\r\nimport { WithPreload } from '../../../../shared/WithPreload/WithPreload';\r\nimport { ChatMessageBox } from '../../../Chat/MessageBox/ChatMessageBox';\r\n\r\nimport { MessageList } from '../../../../models/types/MessageList';\r\nimport { UrlQueryParams } from '../../../../models/types/UrlQueryParams';\r\n\r\nimport { getChatHistoryByChatId, sendMessagetoChat } from '../../../../services/chatService';\r\nimport { isTextMessageChained } from '../../../../helpers/utils';\r\nimport { navigate } from '../../../../helpers/history';\r\nimport { IWithPreloadInjectedProps } from '../../../../shared/WithPreload/IWithPreloadInjectedProps';\r\n\r\nexport class MainContentLayout extends Component<IWithPreloadInjectedProps<MessageList>, { messageList: MessageList }> {\r\n  constructor(props: IWithPreloadInjectedProps<MessageList>) {\r\n    super(props);\r\n    this.state = {\r\n      messageList: props.data,\r\n    };\r\n  }\r\n\r\n  private onChatClosed = () => {\r\n    navigate('/');\r\n  }\r\n\r\n  private onSend = (content: string) => {\r\n    const { dataId } = this.props;\r\n    if (!content.trim().length) {\r\n      return;\r\n    }\r\n    sendMessagetoChat(dataId, content)\r\n      .then((res) => {\r\n        this.setState((prevState) => {\r\n          const { messageList } = prevState;\r\n          const lastMessage = messageList[messageList.length - 1];\r\n          const message = isTextMessageChained(res, lastMessage);\r\n          return {\r\n            ...prevState,\r\n            messageList: messageList.concat(message),\r\n          };\r\n        });\r\n      });\r\n  }\r\n\r\n  render() {\r\n    const { messageList } = this.state;\r\n    return (\r\n      <>\r\n        <button className=\"close-chat-button button-reset\" onClick={this.onChatClosed} type=\"button\">X</button>\r\n        <ChatHistory messageList={messageList} />\r\n        <ChatMessageBox onSend={this.onSend} />\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst withPreload = WithPreload(getChatHistoryByChatId)(MainContentLayout);\r\nconst withQuery = WithQuery(UrlQueryParams.chatId)(withPreload);\r\nexport const MainContentLayoutWithRouterAndQueryAndPreload = withRouter(withQuery);\r\n","import React, { Component, ComponentType } from 'react';\n\nimport { IWithPreloadInjectedProps } from './IWithPreloadInjectedProps';\nimport { WithPreloadProps } from './WithPreloadProps';\nimport { WithPreloadChildProps } from './WithPreloadChildProps';\nimport { IWithPreloadState } from './IWithPreloadState';\n\nexport function WithPreload<DataType>(provider: (id: string) => Promise<DataType>) {\n  return <PropsType extends IWithPreloadInjectedProps<DataType>>(ChildComponent: ComponentType<PropsType>) => {\n    return class extends Component<WithPreloadProps<PropsType, DataType>, IWithPreloadState<DataType>> {\n      constructor(props: WithPreloadProps<PropsType, DataType>) {\n        super(props);\n        this.state = {\n          isLoading: false,\n        };\n      }\n\n      componentDidMount() {\n        this.preload();\n      }\n\n      componentDidUpdate(prevProp: WithPreloadProps<PropsType, DataType>) {\n        const { dataId } = this.props;\n        if (prevProp.dataId !== dataId) {\n          this.preload();\n        }\n      }\n\n      private preload() {\n        this.setState({ isLoading: true });\n        const { dataId } = this.props;\n        provider(dataId).then((data) => this.setState({ isLoading: false, preloadedData: data }));\n      }\n\n      render() {\n        const { isLoading, preloadedData } = this.state;\n        return (\n          <>\n            {\n              isLoading ? <p>Data is loading...</p> : <ChildComponent {...this.props as WithPreloadChildProps<PropsType, DataType>} data={preloadedData} />\n            }\n          </>\n        );\n      }\n    };\n  };\n}\n","export enum AuthFormFields {\r\n  LOGIN = 'login',\r\n  PASSWORD = 'password',\r\n}\r\n","/* eslint-disable no-useless-escape */\r\nexport enum StringParams {\r\n  FIELD = '{{FIELD}}',\r\n}\r\n","import React, { FC } from 'react';\n\nimport './ChatEmptyPage.css';\n\nexport const ChatEmptyPage: FC = () => (\n  <div className=\"container\">\n    <span>Please select a chat to start messaging</span>\n  </div>\n);\n","import React, { FC } from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\n\r\nimport { MainContentLayoutWithRouterAndQueryAndPreload } from './Layout/MainContentLayout';\r\nimport { ChatEmptyPage } from '../../Chat/EmptyPage/ChatEmptyPage';\r\nimport { WithQuery } from '../../../shared/WithQueryFromUrl/WithQuery';\r\n\r\nimport { UrlQueryParams } from '../../../models/types/UrlQueryParams';\r\nimport { IWithQueryFromUrlInjectedProps } from '../../../shared/WithQueryFromUrl/IWithQueryFromUrlInjectedProps';\r\n\r\nimport './MainContent.css';\r\n\r\nexport const MainContent: FC<IWithQueryFromUrlInjectedProps> = ({ dataId }: IWithQueryFromUrlInjectedProps) => (\r\n  <div className={`content ${dataId ? 'displayed' : 'hidden'}`}>\r\n    {\r\n      dataId\r\n        ? <MainContentLayoutWithRouterAndQueryAndPreload />\r\n        : <ChatEmptyPage />\r\n    }\r\n  </div>\r\n);\r\n\r\nexport const MainContentWithQuery = withRouter(WithQuery(UrlQueryParams.chatId)(MainContent));\r\n","import React, { FC } from 'react';\r\n\r\nimport { MainSidebarWithQuery } from '../Sidebar/MainSidebar';\r\nimport { MainContentWithQuery } from '../Content/MainContent';\r\n\r\nimport './MainLayout.css';\r\n\r\nexport const MainLayout: FC = () => (\r\n  <main className=\"layout\">\r\n    <MainSidebarWithQuery />\r\n    <MainContentWithQuery />\r\n  </main>\r\n);\r\n","import React, { Component, FormEvent } from 'react';\r\n\r\nimport { AuthFormFields } from '../../../models/types/AuthFormFields';\r\nimport { StringParams } from '../../../models/types/StringParams';\r\nimport { IAuthFormProps } from './IAuthFormProps';\r\nimport { IAuthFormState } from './IAuthFormState';\r\n\r\nimport './Auth.css';\r\nimport { resources } from '../../../models/constants/resources';\r\n\r\nexport class Auth extends Component<IAuthFormProps, IAuthFormState> {\r\n  constructor(props: IAuthFormProps) {\r\n    super(props);\r\n    this.state = {\r\n      login: '',\r\n      password: '',\r\n      errors: {\r\n        login: '',\r\n        password: '',\r\n      },\r\n    };\r\n  }\r\n\r\n  onSubmit = (e: FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    const { login, password } = this.state;\r\n    const isValidationError = !!(this.validateLogin(login) || this.validatePassword(password));\r\n    if (isValidationError) {\r\n      this.setState((prevState) => ({\r\n        ...prevState,\r\n        errors: {\r\n          login: this.validate(AuthFormFields.LOGIN, login),\r\n          password: this.validate(AuthFormFields.PASSWORD, password),\r\n        },\r\n      }));\r\n      return;\r\n    }\r\n    const { onSubmit } = this.props;\r\n    onSubmit({ login, password });\r\n  }\r\n\r\n  onChange = (filed: AuthFormFields) => {\r\n    return (e: React.ChangeEvent<HTMLInputElement>) => {\r\n      const { value } = e.target;\r\n      this.setState((prevState) => ({ ...prevState, [filed]: value }));\r\n    };\r\n  }\r\n\r\n  onBlur = (field: AuthFormFields) => {\r\n    return () => {\r\n      const { [field]: value } = this.state;\r\n      this.setState((prevState) => ({\r\n        ...prevState,\r\n        errors: {\r\n          ...prevState.errors,\r\n          [field]: this.validate(field, value),\r\n        },\r\n      }));\r\n    };\r\n  }\r\n\r\n  private validate(field: AuthFormFields, value: string) {\r\n    if (field === AuthFormFields.LOGIN) {\r\n      return this.validateLogin(value).replace(new RegExp(StringParams.FIELD, 'g'), field);\r\n    }\r\n    return this.validatePassword(value).replace(new RegExp(StringParams.FIELD, 'g'), field);\r\n  }\r\n\r\n  private validateLogin(value: string) {\r\n    const { loginPattern } = this.props;\r\n    if (!value.trim().length) {\r\n      return resources.auth.validation.required;\r\n    }\r\n    if (!loginPattern.test(value)) {\r\n      return resources.auth.validation.forbiddenFieldThreeChars;\r\n    }\r\n    return '';\r\n  }\r\n\r\n  private validatePassword(value: string) {\r\n    const { passwordPattern } = this.props;\r\n    if (!value.trim().length) {\r\n      return resources.auth.validation.required;\r\n    }\r\n    if (!passwordPattern.test(value)) {\r\n      return resources.auth.validation.forbiddenFieldEightChars;\r\n    }\r\n    return '';\r\n  }\r\n\r\n  render() {\r\n    const { login, password, errors } = this.state;\r\n    const { action } = this.props;\r\n    return (\r\n      <div className=\"auth-form-wrap\">\r\n        <form onSubmit={this.onSubmit} className=\"auth-form\">\r\n          <label className=\"label\" htmlFor=\"login\">\r\n            <span>Login: </span>\r\n            <input\r\n              type=\"text\"\r\n              className=\"control\"\r\n              id=\"login\"\r\n              value={login}\r\n              onBlur={this.onBlur(AuthFormFields.LOGIN)}\r\n              onChange={this.onChange(AuthFormFields.LOGIN)}\r\n            />\r\n            <span className=\"error\">{errors.login}</span>\r\n          </label>\r\n          <label className=\"label\" htmlFor=\"password\">\r\n            <span>Password: </span>\r\n            <input\r\n              type=\"password\"\r\n              className=\"control\"\r\n              id=\"password\"\r\n              value={password}\r\n              onBlur={this.onBlur(AuthFormFields.PASSWORD)}\r\n              onChange={this.onChange(AuthFormFields.PASSWORD)}\r\n            />\r\n            <span className=\"error\">{errors.password}</span>\r\n          </label>\r\n          <button className=\"button-reset register-form-button\" type=\"submit\">{action}</button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { FC } from 'react';\r\nimport { Route, RouteComponentProps, Redirect } from 'react-router-dom';\r\n\r\nimport { IProtectedRouteProps } from './IProtectedRouteProps';\r\n\r\nimport { getIsAuthorized } from '../../services/sessionService';\r\n\r\nexport const ProtectedRoute: FC<IProtectedRouteProps> = ({ component: Component, ...rest }: IProtectedRouteProps) => (\r\n  <Route\r\n    {...rest}\r\n    render={(props: RouteComponentProps) => (\r\n      getIsAuthorized()\r\n        ? <Component {...props as any} />\r\n        : <Redirect to=\"/login\" />\r\n    )}\r\n  />\r\n);\r\n","import { IAuthData } from \"../models/interfaces/IAuthData\"\r\nimport { mockService } from \"../helpers/MockState/MockService\"\r\nimport { setIsAuthorized, setUserData } from \"./sessionService\";\r\nimport { navigate } from \"../helpers/history\";\r\n\r\nexport const signUp = (data: IAuthData) => {\r\n  mockService.signUp(data)\r\n    .then((user) => {\r\n      setIsAuthorized();\r\n      setUserData(user);\r\n      navigate('/');\r\n    });\r\n};\r\n\r\nexport const signIn = (data: IAuthData) => {\r\n  mockService.signIn(data)\r\n    .then((user) => {\r\n      setIsAuthorized();\r\n      setUserData(user);\r\n      navigate('/');\r\n    });\r\n}\r\n","export const NAME_PATTERN = /^[A-Za-z0-9-_]{3,}$/;\r\n","export const PASSWORD_PATTERN = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/;\r\n","import React from 'react';\r\nimport { Route } from 'react-router-dom';\r\n\r\nimport { MainLayout } from './components/Main/Layout/MainLayout';\r\nimport { Auth } from './components/Core/Auth/Auth';\r\nimport { ProtectedRoute } from './shared/ProtectedRoute/ProtectedRoute';\r\n\r\nimport { signUp, signIn } from './services/authSevice';\r\nimport { NAME_PATTERN } from './models/constants/NAME_PATTERN';\r\nimport { PASSWORD_PATTERN } from './models/constants/PASSWORD_PATTERN';\r\nimport { resources } from './models/constants/resources';\r\n\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <ProtectedRoute exact path=\"/\" component={MainLayout} />\r\n      <ProtectedRoute path=\"/chat\" component={MainLayout} />\r\n      <Route path=\"/login\">\r\n        <Auth onSubmit={signIn} loginPattern={NAME_PATTERN} passwordPattern={PASSWORD_PATTERN} action={resources.auth.actions.signIn} />\r\n      </Route>\r\n      <Route path=\"/register\">\r\n        <Auth onSubmit={signUp} loginPattern={NAME_PATTERN} passwordPattern={PASSWORD_PATTERN} action={resources.auth.actions.signUp} />\r\n      </Route>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Router } from 'react-router-dom';\n\nimport * as serviceWorker from './serviceWorker';\n\nimport App from './App';\n\nimport { history } from './helpers/history';\n\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router history={history}>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}