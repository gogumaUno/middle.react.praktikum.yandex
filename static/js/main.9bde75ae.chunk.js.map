{"version":3,"sources":["logo.svg","serviceWorker.ts","types/UrlQueryParams.ts","constants/resources.ts","shared/Avatar/Avatar.tsx","components/Chat/Card/Meta/ChatCardMeta.tsx","components/Chat/Card/Message/ChatCardMessage.tsx","helpers/dateHelper.ts","components/Chat/Card/ChatCard.tsx","components/Chat/List/ChatList.tsx","entities/Parser.ts","constants/QUERY_PATTERN.ts","helpers/queryParser.ts","shared/WithQueryFromUrl/WithQuery.tsx","enums/MessageTypes.ts","helpers/MockState/mockStateHelpers.ts","helpers/MockState/mockStateFactories.ts","services/sessionService.ts","helpers/MockState/MockStateStorage.ts","helpers/MockState/MockService.ts","helpers/utils.ts","helpers/mapperHelper.ts","services/chatService.ts","components/Main/Sidebar/MainSidebar.tsx","components/Chat/MessageWrapper/ChatMessageWrapper.tsx","components/Chat/ServiceMessage/ChatServiceMessage.tsx","components/Chat/TextMessage/ChatTextMessage.tsx","components/Chat/History/ChatHistory.tsx","enums/ChatMessageBoxRows.ts","shared/SendIcon/SendIcon.tsx","enums/Routes.ts","components/Chat/MessageBox/ChatMessageBox.tsx","helpers/history.ts","shared/WithPreload/WithPreload.tsx","enums/AuthFormFields.ts","enums/StringParams.ts","enums/AuthType.ts","shared/ArrowLeftIcon/ArrowLeftIcon.tsx","components/Main/Content/Layout/MainContentLayout.tsx","components/Chat/EmptyPage/ChatEmptyPage.tsx","components/Main/Content/MainContent.tsx","components/Main/Layout/MainLayout.tsx","shared/FormField/FormField.tsx","components/Core/Auth/Auth.tsx","shared/ProtectedRoute/ProtectedRoute.tsx","services/authSevice.ts","constants/NAME_PATTERN.ts","constants/PASSWORD_PATTERN.ts","components/Core/App/App.tsx","index.tsx"],"names":["module","exports","Boolean","window","location","hostname","match","UrlQueryParams","resources","cardIcon","messageAuthor","default","serviceMessage","messageWrap","actions","signIn","signUp","link","validation","required","forbiddenFieldThreeChars","forbiddenFieldEightChars","Avatar","className","src","alt","ChatCardMeta","chatName","lastMessageDate","ChatCardMessage","author","message","formatUnit","n","removeTimeFromTimestamp","d","Date","setHours","ChatCard","logo","name","lastMessage","isSelected","messageDate","date","day","getDate","month","getMonth","year","getFullYear","timestamp","content","ChatList","chatList","selectedChat","map","item","guid","to","chatId","key","Parser","dictionary","pattern","str","Map","this","exec","regExpArr","value","set","QUERY_PATTERN","RegExp","queryParser","WithQuery","ChildComponent","props","query","execute","search","get","dataId","MessageTypes","randomInteger","max","rand","Math","random","floor","storageAssembler","keys","factory","reduce","acc","i","messagesFactoryWrapper","messages","users","contentStorage","authorIds","start","end","messagesNumber","length","uuid","authorId","getTime","isChained","push","type","Text","messagesFactory","getUserData","data","sessionStorage","getItem","JSON","parse","MockStateStorage","userStorage","chatStorage","messageStorage","chatNames","chatGuids","usernames","initializeStorage","initMockUser","id","user","authData","Object","values","filter","u","login","password","index","avatar","userFactoryWrapper","chatInfoFactoryWrapper","mockService","storage","chats","getChats","getMessages","chatInfo","mapToChatInfo","Promise","resolve","messageList","getChatHistoryByChatId","m","mapToMessage","dto","rest","addMessage","addUser","userDto","getUser","reject","getUserById","chat","chatMessages","addServiceMessageToChatHistory","dateSet","Set","has","add","Service","isTextMessageChained","current","prev","isSameAuthor","isSameDate","mapToChainedMessageList","arr","prevMessage","mapTextMessageDtoToTextMessage","sendMessagetoChat","maptMessageToTextMessageDto","then","res","MainSidebar","state","getChatList","setState","console","error","sort","a","b","sortedChatList","getSortedChatList","Component","MainSidebarWithQuery","withRouter","ChatMessageWrapper","children","ChatServiceMessage","toDateString","ChatTextMessage","forwardedRef","ref","hours","getHours","minutes","getMinutes","seconds","getSeconds","ChatHistory","messageListContainerRef","lastMessageRef","React","createRef","scrollToBottom","bottom","getBoundingClientRect","scrollTop","scrollTo","defaultProps","ChatMessageBoxRows","SendIcon","role","xmlns","width","height","viewBox","aria-labelledby","stroke","strokeWidth","strokeLinecap","strokeLinejoin","fill","color","points","Routes","ChatMessageBox","onChange","e","target","rows","calculateSize","onSubmit","preventDefault","submit","onKeyDown","keyCode","shiftKey","MIN_ROWS","onSend","split","min","MAX_ROWS","htmlFor","history","createHashHistory","navigate","provider","AuthFormFields","StringParams","AuthType","ArrowLeftIcon","MainContentLayout","onChatClosed","HOME","trim","prevState","concat","catch","err","onClick","withPreload","dtoList","isLoading","preload","prevProp","preloadedData","withQuery","MainContentLayoutWithRouter","ChatEmptyPage","MainContentWithQuery","MainLayout","FormField","label","onBlur","Auth","validateLogin","validatePassword","errors","validate","LOGIN","PASSWORD","filed","field","replace","FIELD","loginPattern","test","passwordPattern","isSignIn","SIGN_IN","action","REGISTER","linkText","ProtectedRoute","component","render","getIsAuthorized","handleResponse","setItem","stringify","setUserData","NAME_PATTERN","PASSWORD_PATTERN","App","exact","path","CHAT","SIGN_UP","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9bde75ae.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export enum UrlQueryParams {\r\n  chatId = 'chatId'\r\n}\r\n","/* eslint-disable max-len */\r\nexport const resources = {\r\n  avatar: {\r\n    cardIcon: 'Chat icon',\r\n    messageAuthor: 'Author avatar',\r\n    default: 'Avatar',\r\n  },\r\n  messages: {\r\n    serviceMessage: 'service-message',\r\n    messageWrap: 'message-wrap',\r\n  },\r\n  auth: {\r\n    actions: {\r\n      signIn: 'login',\r\n      signUp: 'sign up',\r\n    },\r\n    link: {\r\n      signIn: 'Doesn\\'t have an account?',\r\n      signUp: 'Already have an account?',\r\n    },\r\n    validation: {\r\n      required: '[[FIELD]] is required',\r\n      forbiddenFieldThreeChars: '[[FIELD]] must contain minimum three characters: letters, numbers, hyphen or underscore',\r\n      forbiddenFieldEightChars: '[[FIELD]] must contain minimum eight characters, at least one uppercase letter, one lowercase letter, one number and one special character',\r\n    },\r\n  },\r\n};\r\n","import React, { FunctionComponent } from 'react';\r\n\r\nimport { AvatarProps } from './AvatarProps';\r\n\r\nimport { resources } from '../../constants/resources';\r\n\r\nimport './Avatar.css';\r\n\r\nexport const Avatar: FunctionComponent<AvatarProps> = ({\r\n  className,\r\n  src,\r\n  alt = resources.avatar.default,\r\n}: AvatarProps) => (\r\n  <div className={className}>\r\n    <img src={src} alt={alt} />\r\n  </div>\r\n);\r\n","import React, { FunctionComponent } from 'react';\n\nimport { IChatCardMetaProps } from './IChatCardMetaProps';\n\nimport './ChatCardMeta.css';\n\nexport const ChatCardMeta: FunctionComponent<IChatCardMetaProps> = ({ chatName, lastMessageDate }: IChatCardMetaProps) => (\n  <div className=\"card-meta\">\n    <div className=\"card-meta__name\">\n      <span>{chatName}</span>\n    </div>\n    <div className=\"card-meta__date\">\n      <span>{lastMessageDate}</span>\n    </div>\n  </div>\n);\n","import React, { FunctionComponent } from 'react';\n\nimport { IChatCardMessageProps } from './IChatCardMessageProps';\n\nimport './ChatCardMessage.css';\n\nexport const ChatCardMessage: FunctionComponent<IChatCardMessageProps> = ({ author, message }: IChatCardMessageProps) => (\n  <div className=\"card-message\">\n    <span className=\"card-message__author\">\n      {author}\n      :\n    </span>\n    <span className=\"card-message__content\">{message}</span>\n  </div>\n);\n","const formatUnit = (n: number) => {\r\n  return n >= 10 ? n : `0${n}`;\r\n};\r\n\r\nexport const getDate = (d: Date | number) => {\r\n  const date = new Date(d);\r\n  const day = formatUnit(date.getDate());\r\n  const month = formatUnit(date.getMonth() + 1);\r\n  const year = formatUnit(date.getFullYear());\r\n  return `${day}/${month}/${year}`;\r\n};\r\n\r\nexport const getTime = (d: Date | number) => {\r\n  const date = new Date(d);\r\n  const hours = formatUnit(date.getHours());\r\n  const minutes = formatUnit(date.getMinutes());\r\n  const seconds = formatUnit(date.getSeconds());\r\n  return `${hours}:${minutes}:${seconds}`;\r\n};\r\n\r\nexport const removeTimeFromTimestamp = (d: number | Date) => {\r\n  const date = new Date(d);\r\n  return date.setHours(0, 0, 0, 0);\r\n};\r\n\r\nexport const getServiceMessage = (d: number | Date) => {\r\n  const date = new Date(d);\r\n  return date.toDateString();\r\n};\r\n","import React, { FC } from 'react';\r\n\r\nimport { Avatar } from '../../../shared/Avatar/Avatar';\r\n\r\nimport { IChatCardProps } from './IChatCardProps';\r\nimport { ChatCardMeta } from './Meta/ChatCardMeta';\r\nimport { ChatCardMessage } from './Message/ChatCardMessage';\r\n\r\nimport { getDate } from '../../../helpers/dateHelper';\r\nimport { resources } from '../../../constants/resources';\r\n\r\nimport './ChatCard.css';\r\n\r\nexport const ChatCard: FC<IChatCardProps> = ({\r\n  logo,\r\n  name,\r\n  lastMessage,\r\n  isSelected,\r\n}: IChatCardProps) => {\r\n  const messageDate = getDate(lastMessage.timestamp);\r\n  return (\r\n    <div className={`card-wrap ${isSelected ? 'selected' : ''}`}>\r\n      <section className=\"card\">\r\n        <section className=\"card__body\">\r\n          <Avatar className=\"card__logo\" src={logo} alt={resources.avatar.cardIcon} />\r\n          <section className=\"card__info center\">\r\n            <ChatCardMeta chatName={name} lastMessageDate={messageDate} />\r\n            <ChatCardMessage author={lastMessage.author.name} message={lastMessage.content} />\r\n          </section>\r\n        </section>\r\n      </section>\r\n    </div>\r\n  );\r\n};\r\n","import React, { FC } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport { ChatCard } from '../Card/ChatCard';\r\n\r\nimport { IChatListProps } from './IChatListProps';\r\nimport { UrlQueryParams } from '../../../types/UrlQueryParams';\r\n\r\nexport const ChatList: FC<IChatListProps> = ({ chatList, selectedChat }: IChatListProps) => (\r\n  <section>\r\n    {chatList.map((item) => {\r\n      const isSelected = selectedChat === item.guid;\r\n      return (\r\n        <Link className=\"link-reset\" to={`/chat?${UrlQueryParams.chatId}=${item.guid}`} key={item.guid}>\r\n          <ChatCard {...item} isSelected={isSelected} />\r\n        </Link>\r\n      );\r\n    })}\r\n  </section>\r\n);\r\n","import { IHashTable } from '../interfaces/IHashTable';\r\n\r\nexport class Parser<T> {\r\n  constructor(\r\n    private dictionary: IHashTable<T>,\r\n    private pattern: RegExp,\r\n  ) { }\r\n\r\n  public execute(str: string): Map<T, string> {\r\n    const map: Map<T, string> = new Map();\r\n    for (let match = this.pattern.exec(str); match !== null; match = this.pattern.exec(str)) {\r\n      const key = this.dictionary[match[0]];\r\n      if (key) {\r\n        const regExpArr = this.pattern.exec(str);\r\n        const value = regExpArr?.[0] ?? '';\r\n        map.set(key, value);\r\n      }\r\n    }\r\n    return map;\r\n  }\r\n}\r\n","export const QUERY_PATTERN = new RegExp(/[^?=&]+/g);\r\n","import { Parser } from '../entities/Parser';\r\n\r\nimport { UrlQueryParams } from '../types/UrlQueryParams';\r\nimport { QUERY_PATTERN } from '../constants/QUERY_PATTERN';\r\n\r\nexport const queryParser = new Parser<UrlQueryParams>(UrlQueryParams, QUERY_PATTERN);\r\n","import React, { ComponentType } from 'react';\r\n\r\nimport { IWithQueryFromUrlInjectedProps } from './IWithQueryFromUrlInjectedProps';\r\nimport { WithQueryFromUrlProps } from './WithQueryFromUrlProps';\r\nimport { UrlQueryParams } from '../../types/UrlQueryParams';\r\n\r\nimport { queryParser } from '../../helpers/queryParser';\r\n\r\nexport function WithQuery(key: UrlQueryParams) {\r\n  return <PropsType extends IWithQueryFromUrlInjectedProps>(ChildComponent: ComponentType<PropsType>) => {\r\n    return (props: WithQueryFromUrlProps<PropsType>) => {\r\n      const { location } = props;\r\n      const queryMap = queryParser.execute(location?.search ?? '');\r\n      const query = queryMap.get(key);\r\n      return <ChildComponent dataId={query} {...props as PropsType} />;\r\n    };\r\n  };\r\n}\r\n","export enum MessageTypes {\r\n  Service,\r\n  Text,\r\n}\r\n","export function randomInteger(max: number) {\n  const rand = 1 + Math.random() * (max);\n  return Math.floor(rand);\n}\n\nexport function randomDate(start: Date, end: Date) {\n  return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime())).getTime();\n}\n","import { v4 as uuid } from 'uuid';\r\n\r\nimport { IMockMessage } from './interfaces/IMockMessage';\r\nimport { MessageTypes } from '../../enums/MessageTypes';\r\nimport { IHashTable } from '../../interfaces/IHashTable';\r\n\r\nimport { randomInteger, randomDate } from './mockStateHelpers';\r\n\r\nimport logo from '../../logo.svg';\r\n\r\nexport function messagesFactory(contentStorage: string[], authorIds: string[]): IMockMessage[] {\r\n  const messagesNumber = randomInteger(contentStorage.length - 1);\r\n  const messages: IMockMessage[] = [];\r\n  for (let i = 0; i <= messagesNumber; i += 1) {\r\n    const guid = uuid();\r\n    const authorId = authorIds[randomInteger(authorIds.length - 1)];\r\n    const content = contentStorage[randomInteger(contentStorage.length - 1)];\r\n    const timestamp = randomDate(new Date(2020, 0, 1), new Date());\r\n    const isChained = !!randomInteger(1);\r\n    messages.push({\r\n      guid,\r\n      authorId,\r\n      content,\r\n      timestamp,\r\n      type: MessageTypes.Text,\r\n    });\r\n    if (isChained) {\r\n      messages.push({\r\n        guid: uuid(),\r\n        authorId,\r\n        content: contentStorage[randomInteger(contentStorage.length - 1)],\r\n        timestamp: timestamp + randomInteger(1200000),\r\n        type: MessageTypes.Text,\r\n      });\r\n    }\r\n  }\r\n  return messages;\r\n}\r\n\r\nexport function storageAssembler<T>(keys: string[], factory: (k: string, i: number) => T): IHashTable<T> {\r\n  return keys.reduce((acc: IHashTable<T>, key, i) => {\r\n    acc[key] = factory(key, i);\r\n    return acc;\r\n  }, {});\r\n}\r\n\r\nexport function userFactoryWrapper(usernames: string[]) {\r\n  return (guid: string, index: number) => ({\r\n    guid,\r\n    name: usernames[index],\r\n    avatar: logo,\r\n  });\r\n}\r\n\r\nexport function chatInfoFactoryWrapper(chatNames: string[]) {\r\n  return (guid: string, index: number) => ({\r\n    guid,\r\n    name: chatNames[index],\r\n    logo,\r\n  });\r\n}\r\n\r\nexport function messagesFactoryWrapper(messages: string[], users: string[]) {\r\n  return () => messagesFactory(messages, users);\r\n}\r\n","import { IUser } from '../interfaces/IUser';\r\n\r\nexport const getIsAuthorized = (): boolean | null => {\r\n  const data = sessionStorage.getItem('isAuthorized');\r\n  if (data !== null) {\r\n    return JSON.parse(data);\r\n  }\r\n  return data;\r\n};\r\n\r\nexport const setIsAuthorized = () => {\r\n  sessionStorage.setItem('isAuthorized', JSON.stringify(true));\r\n};\r\n\r\nexport const setUserData = (user: IUser) => {\r\n  sessionStorage.setItem('user', JSON.stringify(user));\r\n};\r\n\r\nexport const getUserData = (): IUser | null => {\r\n  const data = sessionStorage.getItem('user');\r\n  if (data !== null) {\r\n    return JSON.parse(data);\r\n  }\r\n  return data;\r\n};\r\n","import { v4 as uuid } from 'uuid';\r\n\r\nimport dictionary from './mockStateDictionary.json';\r\n\r\nimport { IHashTable } from '../../interfaces/IHashTable';\r\nimport { IMockChatInfo } from './interfaces/IMockChatInfo';\r\nimport { IMockMessage } from './interfaces/IMockMessage';\r\nimport { IUser } from '../../interfaces/IUser';\r\nimport { IStorage } from './interfaces/IStorage';\r\nimport { IMockUser } from './interfaces/IMockUser';\r\nimport { IAuthData } from '../../interfaces/IAuthData';\r\n\r\nimport {\r\n  storageAssembler,\r\n  userFactoryWrapper,\r\n  chatInfoFactoryWrapper,\r\n  messagesFactoryWrapper,\r\n} from './mockStateFactories';\r\nimport { getUserData } from '../../services/sessionService';\r\n\r\nexport class MockStateStorage implements IStorage {\r\n  private userStorage: IHashTable<IMockUser> = {};\r\n  private chatStorage: IHashTable<IMockChatInfo> = {};\r\n  private messageStorage: IHashTable<IMockMessage[]> = {};\r\n\r\n  constructor() {\r\n    const {\r\n      chatNames,\r\n      chatGuids,\r\n      usernames,\r\n      messages,\r\n    } = dictionary;\r\n    this.initializeStorage(chatNames, chatGuids, usernames, messages);\r\n    this.initMockUser();\r\n  }\r\n\r\n  getUserById(id: string) {\r\n    return this.userStorage[id];\r\n  }\r\n\r\n  getChats() {\r\n    return this.chatStorage;\r\n  }\r\n\r\n  getMessages() {\r\n    return this.messageStorage;\r\n  }\r\n\r\n  getChatHistoryByChatId(id: string) {\r\n    return this.messageStorage[id];\r\n  }\r\n\r\n  addMessage(chatId: string, message: IMockMessage) {\r\n    this.messageStorage[chatId].push(message);\r\n  }\r\n\r\n  addUser(user: IMockUser) {\r\n    this.userStorage[user.guid] = user;\r\n  }\r\n\r\n  getUser(authData: IAuthData): IMockUser | null {\r\n    const user = Object.values(this.userStorage).filter((u) => u.name === authData.login)[0];\r\n    if (user && user.password === authData.password) {\r\n      return user;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  private initializeStorage(chatNames: string[], chatGuids: string[], usernames: string[], messages: string[]) {\r\n    this.userStorage = storageAssembler<IUser>(usernames.map(() => uuid()), userFactoryWrapper(usernames));\r\n    this.chatStorage = storageAssembler<IMockChatInfo>(chatGuids, chatInfoFactoryWrapper(chatNames));\r\n    this.messageStorage = storageAssembler<IMockMessage[]>(\r\n      chatGuids,\r\n      messagesFactoryWrapper(messages, Object.keys(this.userStorage)),\r\n    );\r\n  }\r\n\r\n  private initMockUser() {\r\n    const user = getUserData();\r\n    if (user) {\r\n      this.userStorage[user.guid] = user;\r\n    }\r\n  }\r\n}\r\n","/* eslint-disable no-useless-constructor */\r\n/* eslint-disable no-empty-function */\r\nimport { v4 as uuid } from 'uuid';\r\n\r\nimport { MockStateStorage } from './MockStateStorage';\r\nimport { IChatInfo } from '../../interfaces/IChatInfo';\r\nimport { IMockChatInfo } from './interfaces/IMockChatInfo';\r\nimport { IHashTable } from '../../interfaces/IHashTable';\r\nimport { IMockMessage } from './interfaces/IMockMessage';\r\nimport { ITextMessageDto } from '../../interfaces/IMessage';\r\nimport { IStorage } from './interfaces/IStorage';\r\nimport { IAuthData } from '../../interfaces/IAuthData';\r\nimport { IUser } from '../../interfaces/IUser';\r\nimport { IMockUser } from './interfaces/IMockUser';\r\n\r\nimport avatar from '../../logo.svg';\r\n\r\nclass MockService {\r\n  constructor(private storage: IStorage) { }\r\n\r\n  getChatList(): Promise<IChatInfo[]> {\r\n    const chats = this.storage.getChats();\r\n    const messages = this.storage.getMessages();\r\n    const chatInfo: IChatInfo[] = this.mapToChatInfo(chats, messages);\r\n    return Promise.resolve(chatInfo);\r\n  }\r\n\r\n  getChatHistoryByChatId(chatId: string): Promise<ITextMessageDto[]> {\r\n    const history = this.storage.getChatHistoryByChatId(chatId);\r\n    const messageList = history.map((m) => this.mapToMessage(m));\r\n    return Promise.resolve(messageList);\r\n  }\r\n\r\n  sendMessagetoChat(chatId: string, dto: ITextMessageDto): Promise<ITextMessageDto> {\r\n    const { author, ...rest } = dto;\r\n    const message: IMockMessage = { ...rest, authorId: author.guid };\r\n    this.storage.addMessage(chatId, message);\r\n    return Promise.resolve(this.mapToMessage(message));\r\n  }\r\n\r\n  signUp(dto: IAuthData): Promise<IUser> {\r\n    const user: IMockUser = {\r\n      guid: uuid(),\r\n      avatar,\r\n      name: dto.login,\r\n      password: dto.password,\r\n    };\r\n    this.storage.addUser(user);\r\n    const { password, ...userDto } = user;\r\n    return Promise.resolve(userDto);\r\n  }\r\n\r\n  signIn(dto: IAuthData): Promise<IUser> {\r\n    const user = this.storage.getUser(dto);\r\n    if (user) {\r\n      const { password, ...userDto } = user;\r\n      return Promise.resolve(userDto);\r\n    }\r\n    return Promise.reject();\r\n  }\r\n\r\n  private mapToMessage(m: IMockMessage): ITextMessageDto {\r\n    return {\r\n      guid: m.guid,\r\n      timestamp: m.timestamp,\r\n      author: this.storage.getUserById(m.authorId),\r\n      content: m.content,\r\n      type: m.type,\r\n    };\r\n  }\r\n\r\n  private mapToChatInfo(\r\n    chats: IHashTable<IMockChatInfo>,\r\n    messages: IHashTable<IMockMessage[]>,\r\n  ): IChatInfo[] {\r\n    return Object.keys(chats)\r\n      .map((chatId) => {\r\n        const chat = chats[chatId];\r\n        const chatMessages = messages[chat.guid];\r\n        const message = chatMessages[chatMessages.length - 1];\r\n        return {\r\n          ...chat,\r\n          lastMessage: this.mapToMessage(message),\r\n        };\r\n      });\r\n  }\r\n}\r\n\r\nexport const mockService = new MockService(new MockStateStorage());\r\n","import { v4 as uuid } from 'uuid';\r\n\r\nimport { ITextMessage } from '../interfaces/IMessage';\r\nimport { MessageList } from '../types/MessageList';\r\nimport { MessageTypes } from '../enums/MessageTypes';\r\nimport { Message } from '../types/Message';\r\n\r\nimport { removeTimeFromTimestamp } from './dateHelper';\r\n\r\nexport const addServiceMessageToChatHistory = (messageList: ITextMessage[]): MessageList => {\r\n  const dateSet: Set<number> = new Set();\r\n  return messageList.reduce((acc: MessageList, m) => {\r\n    const timestamp = removeTimeFromTimestamp(m.timestamp);\r\n    if (!dateSet.has(timestamp)) {\r\n      dateSet.add(timestamp);\r\n      acc.push({\r\n        guid: uuid(),\r\n        timestamp,\r\n        type: MessageTypes.Service,\r\n      });\r\n    }\r\n    acc.push(m);\r\n    return acc;\r\n  }, []);\r\n};\r\n\r\nexport const isTextMessageChained = (current: ITextMessage, prev: Message): ITextMessage => {\r\n  const isSameAuthor = prev?.type !== MessageTypes.Service && prev?.author.guid === current.author.guid;\r\n  const isSameDate = removeTimeFromTimestamp(prev?.timestamp) === removeTimeFromTimestamp(current.timestamp);\r\n  if (isSameAuthor && isSameDate) {\r\n    return { ...current, isChained: true };\r\n  }\r\n  return { ...current, isChained: false };\r\n};\r\n","import { v4 as uuid } from 'uuid';\r\n\r\nimport { ITextMessageDto, ITextMessage } from '../interfaces/IMessage';\r\n\r\nimport { MessageTypes } from '../enums/MessageTypes';\r\nimport { IUser } from '../interfaces/IUser';\r\nimport { MessageList } from '../types/MessageList';\r\nimport { isTextMessageChained } from './utils';\r\n\r\nexport const mapToChainedMessageList = (arr: MessageList): MessageList => {\r\n  return arr.map((m, i) => {\r\n    if (m.type === MessageTypes.Text) {\r\n      const prevMessage = arr[i - 1];\r\n      return isTextMessageChained(m, prevMessage);\r\n    }\r\n    return m;\r\n  });\r\n};\r\n\r\nexport const maptMessageToTextMessageDto = (content: string, author: IUser): ITextMessageDto => {\r\n  return {\r\n    content,\r\n    author,\r\n    timestamp: new Date().getTime(),\r\n    guid: uuid(),\r\n    type: MessageTypes.Text,\r\n  };\r\n};\r\n\r\nexport const mapTextMessageDtoToTextMessage = (dto: ITextMessageDto): ITextMessage => {\r\n  return {\r\n    content: dto.content,\r\n    author: dto.author,\r\n    timestamp: dto.timestamp,\r\n    guid: dto.guid,\r\n    type: MessageTypes.Text,\r\n    isChained: false,\r\n  };\r\n};\r\n","import { mockService } from '../helpers/MockState/MockService';\r\nimport { addServiceMessageToChatHistory } from '../helpers/utils';\r\nimport { mapToChainedMessageList, maptMessageToTextMessageDto, mapTextMessageDtoToTextMessage } from '../helpers/mapperHelper';\r\nimport { ITextMessage } from '../interfaces/IMessage';\r\nimport { getUserData } from './sessionService';\r\nimport { MessageList } from '../types/MessageList';\r\nimport { IChatInfo } from '../interfaces/IChatInfo';\r\n\r\nexport const getChatList = (): Promise<IChatInfo[]> => {\r\n  return mockService.getChatList();\r\n};\r\n\r\nexport const getChatHistoryByChatId = (chatId: string): Promise<MessageList> => {\r\n  return mockService.getChatHistoryByChatId(chatId)\r\n    .then((dtoList) => dtoList.map((dto) => mapTextMessageDtoToTextMessage(dto)))\r\n    .then(addServiceMessageToChatHistory)\r\n    .then(mapToChainedMessageList)\r\n    .catch((err) => {\r\n      console.error(err);\r\n      return [];\r\n    });\r\n};\r\n\r\nexport const sendMessagetoChat = (chatId: string, content: string): Promise<ITextMessage> => {\r\n  const user = getUserData();\r\n  if (user) {\r\n    const dto = maptMessageToTextMessageDto(content, user);\r\n    return mockService.sendMessagetoChat(chatId, dto)\r\n      .then((res) => mapTextMessageDtoToTextMessage(res));\r\n  }\r\n  return Promise.reject();\r\n};\r\n","import React, { Component } from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\n\r\nimport { ChatList } from '../../Chat/List/ChatList';\r\nimport { WithQuery } from '../../../shared/WithQueryFromUrl/WithQuery';\r\n\r\nimport { IMainSidebarState } from './IMainSidebarState';\r\nimport { UrlQueryParams } from '../../../types/UrlQueryParams';\r\nimport { IWithQueryFromUrlInjectedProps } from '../../../shared/WithQueryFromUrl/IWithQueryFromUrlInjectedProps';\r\n\r\nimport { getChatList } from '../../../services/chatService';\r\n\r\nimport './MainSidebar.css';\r\n\r\nexport class MainSidebar extends Component<IWithQueryFromUrlInjectedProps, IMainSidebarState> {\r\n  constructor(props: IWithQueryFromUrlInjectedProps) {\r\n    super(props);\r\n    this.state = {\r\n      chatList: [],\r\n    };\r\n  }\r\n\r\n  async componentDidMount() {\r\n    try {\r\n      const chatList = await getChatList();\r\n      this.setState({\r\n        chatList,\r\n      });\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  }\r\n\r\n\r\n  private getSortedChatList() {\r\n    const { chatList } = this.state;\r\n    return chatList.sort((a, b) => a.lastMessage.timestamp - b.lastMessage.timestamp);\r\n  }\r\n\r\n  render() {\r\n    const sortedChatList = this.getSortedChatList();\r\n    const { dataId } = this.props;\r\n    return (\r\n      <aside className={`sidebar ${dataId ? 'hidden' : 'displayed'}`}>\r\n        <div className=\"sidebar-content-wrap\">\r\n          <ChatList selectedChat={dataId} chatList={sortedChatList} />\r\n        </div>\r\n      </aside>\r\n    );\r\n  }\r\n}\r\n\r\nexport const MainSidebarWithQuery = withRouter(WithQuery(UrlQueryParams.chatId)(MainSidebar));\r\n","import React, { FunctionComponent } from 'react';\r\n\r\nimport { IChatMessageWrapperProps } from './IChatMessageWrapperProps';\r\n\r\nimport { resources } from '../../../constants/resources';\r\n\r\nimport './ChatMessageWrapper.css';\r\n\r\nexport const ChatMessageWrapper: FunctionComponent<IChatMessageWrapperProps> = ({\r\n  className = resources.messages.messageWrap,\r\n  children,\r\n}: IChatMessageWrapperProps) => (\r\n  <div className={className}>\r\n    {children}\r\n  </div>\r\n);\r\n","import React, { FunctionComponent } from 'react';\r\n\r\nimport { ChatMessageWrapper } from '../MessageWrapper/ChatMessageWrapper';\r\n\r\nimport { IServiceMessage } from '../../../interfaces/IMessage';\r\n\r\nimport { getServiceMessage } from '../../../helpers/dateHelper';\r\nimport { resources } from '../../../constants/resources';\r\n\r\nimport './ChatServiceMessage.css';\r\n\r\nexport const ChatServiceMessage: FunctionComponent<IServiceMessage> = ({ timestamp }: IServiceMessage) => (\r\n  <ChatMessageWrapper className={resources.messages.serviceMessage}>\r\n    <span className=\"service-message__date\">{getServiceMessage(timestamp)}</span>\r\n  </ChatMessageWrapper>\r\n);\r\n","import React, { FunctionComponent } from 'react';\r\n\r\nimport { Avatar } from '../../../shared/Avatar/Avatar';\r\nimport { ChatMessageWrapper } from '../MessageWrapper/ChatMessageWrapper';\r\n\r\nimport { IChatTextMessageProps } from './IChatTextMessageProps';\r\n\r\nimport { resources } from '../../../constants/resources';\r\nimport { getTime } from '../../../helpers/dateHelper';\r\n\r\nimport './ChatTextMessage.css';\r\n\r\nexport const ChatTextMessage: FunctionComponent<IChatTextMessageProps> = ({\r\n  author,\r\n  content,\r\n  timestamp,\r\n  isChained,\r\n  forwardedRef,\r\n}: IChatTextMessageProps) => (\r\n  <ChatMessageWrapper>\r\n    <section ref={forwardedRef} className={`message ${isChained ? 'chained' : ''}`}>\r\n      <Avatar className=\"message__icon\" src={author.avatar} alt={resources.avatar.messageAuthor} />\r\n      <div className=\"message__body\">\r\n        <span className=\"message__author\">{author.name}</span>\r\n        <div className=\"message__content\">\r\n          <span>{content}</span>\r\n        </div>\r\n      </div>\r\n      <div className=\"message__time\">\r\n        <span>{getTime(timestamp)}</span>\r\n      </div>\r\n    </section>\r\n  </ChatMessageWrapper>\r\n);\r\n","import React, { Component, RefObject } from 'react';\r\n\r\nimport { ChatServiceMessage } from '../ServiceMessage/ChatServiceMessage';\r\nimport { ChatTextMessage } from '../TextMessage/ChatTextMessage';\r\n\r\nimport { IChatHistoryProps } from './IChatHistoryProps';\r\nimport { MessageTypes } from '../../../enums/MessageTypes';\r\n\r\nimport './ChatHistory.css';\r\n\r\nexport class ChatHistory extends Component<IChatHistoryProps> {\r\n  static defaultProps = {\r\n    messageList: [],\r\n  };\r\n\r\n  private messageListContainerRef: RefObject<HTMLDivElement>;\r\n  private lastMessageRef: RefObject<HTMLDivElement>;\r\n\r\n  constructor(props: IChatHistoryProps) {\r\n    super(props);\r\n    this.messageListContainerRef = React.createRef();\r\n    this.lastMessageRef = React.createRef();\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.scrollToBottom();\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    this.scrollToBottom();\r\n  }\r\n\r\n  private scrollToBottom() {\r\n    const bottom = this.lastMessageRef.current?.getBoundingClientRect().bottom || 0;\r\n    if (this.messageListContainerRef.current) {\r\n      const { scrollTop } = this.messageListContainerRef.current;\r\n      this.messageListContainerRef.current.scrollTo(0, scrollTop + bottom);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { messageList } = this.props;\r\n    return (\r\n      <div ref={this.messageListContainerRef} className=\"message-history\">\r\n        {messageList.map((message, i) => {\r\n          let ref;\r\n          if (i === messageList.length - 1) {\r\n            ref = this.lastMessageRef;\r\n          }\r\n          switch (message.type) {\r\n            case MessageTypes.Service:\r\n              return <ChatServiceMessage key={message.guid} {...message} />;\r\n            case MessageTypes.Text:\r\n            default:\r\n              return <ChatTextMessage key={message.guid} forwardedRef={ref} {...message} />;\r\n          }\r\n        })}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","export enum ChatMessageBoxRows {\r\n  MIN_ROWS = 2,\r\n  MAX_ROWS = 10,\r\n}\r\n","import React, { FC } from 'react';\r\n\r\nimport './SendIcon.css';\r\n\r\nexport const SendIcon: FC = () => (\r\n  // eslint-disable-next-line max-len\r\n  <svg className=\"icon\" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\" width=\"25\" height=\"25\" viewBox=\"0 0 24 24\" aria-labelledby=\"sendIconTitle\" stroke=\"#77b7e4\" strokeWidth=\"1\" strokeLinecap=\"square\" strokeLinejoin=\"miter\" fill=\"none\" color=\"#e5e5e5\">\r\n    <title id=\"sendIconTitle\">Send</title>\r\n    <polygon points=\"21.368 12.001 3 21.609 3 14 11 12 3 9.794 3 2.394\" />\r\n  </svg>\r\n);\r\n","export enum Routes {\r\n  LOGIN = '/login',\r\n  REGISTER = '/register',\r\n  CHAT = '/chat',\r\n  HOME = '/',\r\n}\r\n","import React, { Component, ChangeEvent, FormEvent } from 'react';\r\n\r\nimport { SendIcon } from '../../../shared/SendIcon/SendIcon';\r\n\r\nimport { IChatMessageBoxProps } from './IChatMessageBoxProps';\r\nimport { IChatMessageBoxState } from './IChatMessageBoxState';\r\nimport { ChatMessageBoxRows } from '../../../enums/ChatMessageBoxRows';\r\n\r\nimport './ChatMessageBox.css';\r\n\r\nexport class ChatMessageBox extends Component<IChatMessageBoxProps, IChatMessageBoxState> {\r\n  constructor(props: IChatMessageBoxProps) {\r\n    super(props);\r\n    this.state = {\r\n      content: '',\r\n      rows: ChatMessageBoxRows.MIN_ROWS,\r\n    };\r\n  }\r\n\r\n  private onChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n    const { value } = e.target;\r\n    const rows = this.calculateSize(value);\r\n    this.setState(() => ({ content: value, rows }));\r\n  }\r\n\r\n  private onSubmit = (e: FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    this.submit();\r\n  }\r\n\r\n  private onKeyDown = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {\r\n    if (e.keyCode === 13 && !e.shiftKey) {\r\n      e.preventDefault();\r\n      this.submit();\r\n    }\r\n  }\r\n\r\n  private submit() {\r\n    const { content } = this.state;\r\n    const { onSend } = this.props;\r\n    onSend(content);\r\n    this.setState(() => ({ content: '', rows: ChatMessageBoxRows.MIN_ROWS }));\r\n  }\r\n\r\n  private calculateSize(value: string) {\r\n    let rows = Math.max(value.split('\\n').length, value.split('\\r').length);\r\n    rows = Math.max(rows, ChatMessageBoxRows.MIN_ROWS);\r\n    rows = Math.min(rows, ChatMessageBoxRows.MAX_ROWS);\r\n    return rows;\r\n  }\r\n\r\n  render() {\r\n    const { content, rows } = this.state;\r\n    return (\r\n      <div className=\"message-box-wrap\">\r\n        <form onSubmit={this.onSubmit} className=\"message-box\">\r\n          <label className=\"message-box-label\" htmlFor=\"control\">\r\n            <textarea className=\"message-box-control\" id=\"control\" rows={rows} value={content} onChange={this.onChange} onKeyDown={this.onKeyDown} />\r\n          </label>\r\n          <button type=\"submit\" className=\"message-box-button button-reset\">\r\n            <SendIcon />\r\n          </button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import { createHashHistory } from 'history';\r\n\r\nimport { Routes } from '../enums/Routes';\r\n\r\nexport const history = createHashHistory();\r\n\r\nexport function navigate(location: Routes) {\r\n  history.push(location);\r\n}\r\n","import React, { Component, ComponentType } from 'react';\r\n\r\nimport { IWithPreloadInjectedProps } from './IWithPreloadInjectedProps';\r\nimport { WithPreloadProps } from './WithPreloadProps';\r\nimport { IWithPreloadState } from './IWithPreloadState';\r\n\r\nexport function WithPreload<DataType, PropsType extends IWithPreloadInjectedProps<DataType>>(\r\n  provider: (id: string) => Promise<DataType>, ChildComponent: ComponentType<PropsType>,\r\n) {\r\n  return class extends Component<WithPreloadProps<PropsType, DataType>, IWithPreloadState<DataType>> {\r\n    constructor(props: WithPreloadProps<PropsType, DataType>) {\r\n      super(props);\r\n      this.state = {\r\n        isLoading: false,\r\n      };\r\n    }\r\n\r\n    componentDidMount() {\r\n      this.preload();\r\n    }\r\n\r\n    componentDidUpdate(prevProp: WithPreloadProps<PropsType, DataType>) {\r\n      const { dataId } = this.props;\r\n      if (prevProp.dataId !== dataId) {\r\n        this.preload();\r\n      }\r\n    }\r\n\r\n    private preload() {\r\n      this.setState({ isLoading: true });\r\n      const { dataId } = this.props;\r\n      provider(dataId).then((data) => this.setState({ isLoading: false, preloadedData: data }));\r\n    }\r\n\r\n    render() {\r\n      const { isLoading, preloadedData } = this.state;\r\n      return (\r\n        <>\r\n          {\r\n            isLoading ? <p>Data is loading...</p> : <ChildComponent {...this.props as PropsType} data={preloadedData} />\r\n          }\r\n        </>\r\n      );\r\n    }\r\n  };\r\n}\r\n","export enum AuthFormFields {\r\n  LOGIN = 'login',\r\n  PASSWORD = 'password',\r\n}\r\n","/* eslint-disable no-useless-escape */\r\nexport enum StringParams {\r\n  FIELD = '[[FIELD]]',\r\n}\r\n","export enum AuthType {\r\n  SIGN_IN,\r\n  SIGN_UP,\r\n}\r\n","/* eslint-disable max-len */\r\nimport React, { FC } from 'react';\r\n\r\nimport './ArrowLeftIcon.css';\r\n\r\nexport const ArrowLeftIcon: FC = () => (\r\n  <svg className=\"icon\" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\" width=\"25px\" height=\"25px\" viewBox=\"0 0 24 24\" aria-labelledby=\"arrowLeftIconTitle\" stroke=\"#77b7e4\" strokeWidth=\"1.92\" strokeLinecap=\"square\" strokeLinejoin=\"miter\" fill=\"none\" color=\"#77b7e4\">\r\n    <title id=\"arrowLeftIconTitle\">Arrow Left</title>\r\n    <path d=\"M9 6l-6 6 6 6\" />\r\n    <path d=\"M21 12H4\" />\r\n    <path strokeLinecap=\"round\" d=\"M3 12h1\" />\r\n  </svg>\r\n);\r\n","import React, { Component } from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\n\r\nimport { ChatHistory } from '../../../Chat/History/ChatHistory';\r\nimport { WithQuery } from '../../../../shared/WithQueryFromUrl/WithQuery';\r\nimport { WithPreload } from '../../../../shared/WithPreload/WithPreload';\r\nimport { ChatMessageBox } from '../../../Chat/MessageBox/ChatMessageBox';\r\n\r\nimport { MessageList } from '../../../../types/MessageList';\r\nimport { UrlQueryParams } from '../../../../types/UrlQueryParams';\r\nimport { IWithPreloadInjectedProps } from '../../../../shared/WithPreload/IWithPreloadInjectedProps';\r\nimport { isTextMessageChained } from '../../../../helpers/utils';\r\nimport { Routes } from '../../../../enums/Routes';\r\n\r\nimport { getChatHistoryByChatId, sendMessagetoChat } from '../../../../services/chatService';\r\nimport { navigate } from '../../../../helpers/history';\r\nimport { ArrowLeftIcon } from '../../../../shared/ArrowLeftIcon/ArrowLeftIcon';\r\n\r\nexport class MainContentLayout extends Component<IWithPreloadInjectedProps<MessageList>, { messageList: MessageList }> {\r\n  constructor(props: IWithPreloadInjectedProps<MessageList>) {\r\n    super(props);\r\n    this.state = {\r\n      messageList: props.data || [],\r\n    };\r\n  }\r\n\r\n  private onChatClosed = () => {\r\n    navigate(Routes.HOME);\r\n  }\r\n\r\n  private onSend = (content: string) => {\r\n    const { dataId } = this.props;\r\n    if (!content.trim().length) {\r\n      return;\r\n    }\r\n    sendMessagetoChat(dataId, content)\r\n      .then((res) => {\r\n        this.setState((prevState) => {\r\n          const { messageList } = prevState;\r\n          const lastMessage = messageList[messageList.length - 1];\r\n          const message = isTextMessageChained(res, lastMessage);\r\n          return {\r\n            ...prevState,\r\n            messageList: messageList.concat(message),\r\n          };\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        console.error(err);\r\n      });\r\n  }\r\n\r\n  render() {\r\n    const { messageList } = this.state;\r\n    return (\r\n      <>\r\n        <button className=\"close-chat-button button-reset\" onClick={this.onChatClosed} type=\"button\">\r\n          <ArrowLeftIcon />\r\n        </button>\r\n        <ChatHistory messageList={messageList} />\r\n        <ChatMessageBox onSend={this.onSend} />\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst withPreload = WithPreload(getChatHistoryByChatId, MainContentLayout);\r\nconst withQuery = WithQuery(UrlQueryParams.chatId)(withPreload);\r\nexport const MainContentLayoutWithRouter = withRouter(withQuery);\r\n","import React, { FC } from 'react';\r\n\r\nimport './ChatEmptyPage.css';\r\n\r\nexport const ChatEmptyPage: FC = () => (\r\n  <div className=\"center\">\r\n    <span>Please select a chat to start messaging</span>\r\n  </div>\r\n);\r\n","import React, { FC } from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\n\r\nimport { MainContentLayoutWithRouter } from './Layout/MainContentLayout';\r\nimport { ChatEmptyPage } from '../../Chat/EmptyPage/ChatEmptyPage';\r\nimport { WithQuery } from '../../../shared/WithQueryFromUrl/WithQuery';\r\n\r\nimport { UrlQueryParams } from '../../../types/UrlQueryParams';\r\nimport { IWithQueryFromUrlInjectedProps } from '../../../shared/WithQueryFromUrl/IWithQueryFromUrlInjectedProps';\r\n\r\nimport './MainContent.css';\r\n\r\nexport const MainContent: FC<IWithQueryFromUrlInjectedProps> = ({ dataId }: IWithQueryFromUrlInjectedProps) => (\r\n  <div className={`content ${dataId ? 'displayed' : 'hidden'}`}>\r\n    {\r\n      dataId\r\n        ? <MainContentLayoutWithRouter />\r\n        : <ChatEmptyPage />\r\n    }\r\n  </div>\r\n);\r\n\r\nexport const MainContentWithQuery = withRouter(WithQuery(UrlQueryParams.chatId)(MainContent));\r\n","import React, { FC } from 'react';\r\n\r\nimport { MainSidebarWithQuery } from '../Sidebar/MainSidebar';\r\nimport { MainContentWithQuery } from '../Content/MainContent';\r\n\r\nimport './MainLayout.css';\r\n\r\nexport const MainLayout: FC = () => (\r\n  <main className=\"layout\">\r\n    <MainSidebarWithQuery />\r\n    <MainContentWithQuery />\r\n  </main>\r\n);\r\n","import React, { FC } from 'react';\r\n\r\nimport { IFormFieldProps } from './IFormFieldProps';\r\n\r\nimport './FormField.css';\r\n\r\nexport const FormField: FC<IFormFieldProps> = ({\r\n  label,\r\n  value,\r\n  onBlur,\r\n  onChange,\r\n  error,\r\n  type = 'text',\r\n}: IFormFieldProps) => (\r\n  <label className=\"form-field\" htmlFor={label}>\r\n    <span className=\"form-field__label\">{label}</span>\r\n    <input\r\n      id={label}\r\n      type={type}\r\n      className=\"form-field__control\"\r\n      value={value}\r\n      onBlur={onBlur}\r\n      onChange={onChange}\r\n    />\r\n    <div className=\"form-field__error\">\r\n      <span>{error}</span>\r\n    </div>\r\n  </label>\r\n);\r\n","import React, { Component, FormEvent } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport { FormField } from '../../../shared/FormField/FormField';\r\n\r\nimport { AuthFormFields } from '../../../enums/AuthFormFields';\r\nimport { StringParams } from '../../../enums/StringParams';\r\nimport { IAuthFormProps } from './IAuthFormProps';\r\nimport { IAuthFormState } from './IAuthFormState';\r\nimport { Routes } from '../../../enums/Routes';\r\nimport { AuthType } from '../../../enums/AuthType';\r\n\r\nimport { resources } from '../../../constants/resources';\r\n\r\nimport './Auth.css';\r\n\r\nexport class Auth extends Component<IAuthFormProps, IAuthFormState> {\r\n  constructor(props: IAuthFormProps) {\r\n    super(props);\r\n    this.state = {\r\n      login: '',\r\n      password: '',\r\n      errors: {\r\n        login: '',\r\n        password: '',\r\n      },\r\n    };\r\n  }\r\n\r\n  onSubmit = (e: FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    const { login, password } = this.state;\r\n    const isValidationError = !!(this.validateLogin(login) || this.validatePassword(password));\r\n    if (isValidationError) {\r\n      this.setState((prevState) => ({\r\n        ...prevState,\r\n        errors: {\r\n          login: this.validate(AuthFormFields.LOGIN, login),\r\n          password: this.validate(AuthFormFields.PASSWORD, password),\r\n        },\r\n      }));\r\n      return;\r\n    }\r\n    const { onSubmit } = this.props;\r\n    onSubmit({ login, password });\r\n  }\r\n\r\n  onChange = (filed: AuthFormFields) => {\r\n    return (e: React.ChangeEvent<HTMLInputElement>) => {\r\n      const { value } = e.target;\r\n      this.setState((prevState) => ({ ...prevState, [filed]: value }));\r\n    };\r\n  }\r\n\r\n  onBlur = (field: AuthFormFields) => {\r\n    return () => {\r\n      const { [field]: value } = this.state;\r\n      this.setState((prevState) => ({\r\n        ...prevState,\r\n        errors: {\r\n          ...prevState.errors,\r\n          [field]: this.validate(field, value),\r\n        },\r\n      }));\r\n    };\r\n  }\r\n\r\n  private validate(field: AuthFormFields, value: string) {\r\n    if (field === AuthFormFields.LOGIN) {\r\n      return this.validateLogin(value).replace(StringParams.FIELD, field);\r\n    }\r\n    return this.validatePassword(value).replace(StringParams.FIELD, field);\r\n  }\r\n\r\n  private validateLogin(value: string) {\r\n    const { loginPattern } = this.props;\r\n    if (!value.trim().length) {\r\n      return resources.auth.validation.required;\r\n    }\r\n    if (!loginPattern.test(value)) {\r\n      return resources.auth.validation.forbiddenFieldThreeChars;\r\n    }\r\n    return '';\r\n  }\r\n\r\n  private validatePassword(value: string) {\r\n    const { passwordPattern } = this.props;\r\n    if (!value.trim().length) {\r\n      return resources.auth.validation.required;\r\n    }\r\n    if (!passwordPattern.test(value)) {\r\n      return resources.auth.validation.forbiddenFieldEightChars;\r\n    }\r\n    return '';\r\n  }\r\n\r\n  render() {\r\n    const { login, password, errors } = this.state;\r\n    const { type } = this.props;\r\n    const isSignIn = type === AuthType.SIGN_IN;\r\n    const action = isSignIn ? resources.auth.actions.signIn : resources.auth.actions.signUp;\r\n    const link = isSignIn ? Routes.REGISTER : Routes.LOGIN;\r\n    const linkText = isSignIn ? resources.auth.link.signIn : resources.auth.link.signUp;\r\n    return (\r\n      <div className=\"auth-form-container center\">\r\n        <div className=\"auth-form-wrap\">\r\n          <h3 className=\"auth-form-header\">{action}</h3>\r\n          <form onSubmit={this.onSubmit} className=\"auth-form center\">\r\n            <FormField\r\n              label={AuthFormFields.LOGIN}\r\n              value={login}\r\n              error={errors.login}\r\n              onBlur={this.onBlur(AuthFormFields.LOGIN)}\r\n              onChange={this.onChange(AuthFormFields.LOGIN)}\r\n            />\r\n            <FormField\r\n              label={AuthFormFields.PASSWORD}\r\n              value={password}\r\n              error={errors.password}\r\n              type=\"password\"\r\n              onBlur={this.onBlur(AuthFormFields.PASSWORD)}\r\n              onChange={this.onChange(AuthFormFields.PASSWORD)}\r\n            />\r\n            <div className=\"auth-form__actions\">\r\n              <Link to={link}>{linkText}</Link>\r\n              <button className=\"button-reset auth-form__button\" type=\"submit\">{action}</button>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { FC } from 'react';\r\nimport { Route, Redirect, RouteProps } from 'react-router-dom';\r\n\r\nimport { IProtectedRouteProps } from './IProtectedRouteProps';\r\n\r\nimport { getIsAuthorized } from '../../services/sessionService';\r\n\r\nexport const ProtectedRoute: FC<IProtectedRouteProps> = ({ component: Component, ...rest }: IProtectedRouteProps) => (\r\n  <Route\r\n    {...rest}\r\n    render={(props: RouteProps) => (\r\n      getIsAuthorized()\r\n        ? <Component {...props} />\r\n        : <Redirect to=\"/login\" />\r\n    )}\r\n  />\r\n);\r\n","import { IAuthData } from '../interfaces/IAuthData';\r\nimport { mockService } from '../helpers/MockState/MockService';\r\nimport { setIsAuthorized, setUserData } from './sessionService';\r\nimport { navigate } from '../helpers/history';\r\nimport { Routes } from '../enums/Routes';\r\nimport { IUser } from '../interfaces/IUser';\r\n\r\nconst handleResponse = (user: IUser) => {\r\n  setIsAuthorized();\r\n  setUserData(user);\r\n  navigate(Routes.HOME);\r\n};\r\n\r\nexport const signUp = (data: IAuthData) => {\r\n  mockService.signUp(data)\r\n    .then(handleResponse);\r\n};\r\n\r\nexport const signIn = (data: IAuthData) => {\r\n  mockService.signIn(data)\r\n    .then(handleResponse);\r\n};\r\n","export const NAME_PATTERN = /^[A-Za-z0-9-_]{3,}$/;\r\n","export const PASSWORD_PATTERN = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&_-]{8,}$/;\r\n","import React, { FC } from 'react';\r\nimport { Route } from 'react-router-dom';\r\n\r\nimport { MainLayout } from '../../Main/Layout/MainLayout';\r\nimport { Auth } from '../Auth/Auth';\r\nimport { ProtectedRoute } from '../../../shared/ProtectedRoute/ProtectedRoute';\r\n\r\nimport { signUp, signIn } from '../../../services/authSevice';\r\nimport { NAME_PATTERN } from '../../../constants/NAME_PATTERN';\r\nimport { PASSWORD_PATTERN } from '../../../constants/PASSWORD_PATTERN';\r\nimport { Routes } from '../../../enums/Routes';\r\nimport { AuthType } from '../../../enums/AuthType';\r\n\r\nimport './App.css';\r\n\r\nexport const App: FC = () => {\r\n  return (\r\n    <div className=\"App\">\r\n      <ProtectedRoute exact path={Routes.HOME} component={MainLayout} />\r\n      <ProtectedRoute path={Routes.CHAT} component={MainLayout} />\r\n      <Route path={Routes.LOGIN}>\r\n        <Auth onSubmit={signIn} loginPattern={NAME_PATTERN} passwordPattern={PASSWORD_PATTERN} type={AuthType.SIGN_IN} />\r\n      </Route>\r\n      <Route path={Routes.REGISTER}>\r\n        <Auth onSubmit={signUp} loginPattern={NAME_PATTERN} passwordPattern={PASSWORD_PATTERN} type={AuthType.SIGN_UP} />\r\n      </Route>\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Router } from 'react-router-dom';\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport { App } from './components/Core/App/App';\r\n\r\nimport { history } from './helpers/history';\r\n\r\nimport './index.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Router history={history}>\r\n      <App />\r\n    </Router>\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}