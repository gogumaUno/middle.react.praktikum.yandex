{"version":3,"sources":["logo.svg","helpers/mockStateAssembler.ts","models/messageTypes.ts","helpers/dateHelper.ts","helpers/mapperHelper.ts","shared/Avatar/Avatar.tsx","resources.ts","components/Chat/Card/ChatCard.tsx","components/Chat/List/ChatList.tsx","components/Chat/MessageWrapper/ChatMessageWrapper.tsx","components/Chat/TextMessage/ChatTextMessage.tsx","components/Chat/ServiceMessage/ChatServiceMessage.tsx","components/Chat/History/ChatHistory.tsx","core/MainLayout/MainLayout.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","randomInteger","max","rand","Math","random","floor","storageAssembler","keys","factory","reduce","acc","key","i","userFactoryWrapper","usernames","guid","index","name","avatar","logo","chatInfoFactoryWrapper","chatNames","messagesFactoryWrapper","messages","users","contentStorage","authorIds","start","end","messagesNumber","length","uuid","authorId","content","timestamp","Date","getTime","push","messagesFactory","mockStateAssembler","MessageTypes","LocaleStringFormats","userStorage","chatStorage","messageStorage","a","dictionary","map","Object","formatUnit","n","parseDate","d","date","day","getDate","month","getMonth","year","getFullYear","hours","getHours","minutes","getMinutes","seconds","getSeconds","dateHelper","removeTimeFromTimestamp","getServiceMessage","toLocaleString","weekday","short","numeric","replace","mapperHelper","mapChatInfoToChatCardProps","chats","selected","onChatSelected","chatId","chat","chatMessages","lastMessage","author","mapMessageToMessageWithAuthor","messageList","dateSet","Set","m","has","add","type","Service","Text","Avatar","className","src","alt","defaultProps","resources","cardIcon","messageAuthor","serviceMessage","ChatCard","messageDate","data-guid","onClick","ChatList","chatList","ChatMessageWrapper","children","ChatTextMessage","style","position","ChatServiceMessage","ChatHistory","message","MainLayout","props","e","setState","selectedChat","currentTarget","dataset","state","this","selectedChatMessages","getChatList","getMessageList","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.d15fdef6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import { v4 as uuid } from 'uuid';\n\nimport logo from '../logo.svg';\nimport { IUser } from '../models/iuser';\nimport { IChatInfo } from '../models/ichat-info';\nimport { IMessage } from '../models/imessage';\nimport { IHashTable } from '../models/ihash-table';\n\nfunction randomInteger(max: number) {\n  const rand = 1 + Math.random() * (max);\n  return Math.floor(rand);\n}\n\nfunction randomDate(start: Date, end: Date) {\n  return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime())).getTime();\n}\n\nfunction messagesFactory(contentStorage: string[], authorIds: string[]): IMessage[] {\n  const messagesNumber = randomInteger(contentStorage.length - 1);\n  const messages = [];\n  for (let i = 0; i <= messagesNumber; i += 1) {\n    const guid = uuid();\n    const authorId = authorIds[randomInteger(authorIds.length - 1)];\n    const content = contentStorage[randomInteger(contentStorage.length - 1)];\n    const timestamp = randomDate(new Date(2020, 0, 1), new Date());\n    messages.push({\n      guid,\n      authorId,\n      content,\n      timestamp,\n    });\n  }\n  return messages;\n}\n\nfunction storageAssembler<T>(keys: string[], factory: (k: string, i: number) => T) {\n  return keys.reduce((acc, key, i) => {\n    acc[key] = factory(key, i);\n    return acc;\n  }, {} as IHashTable<T>);\n}\n\nfunction userFactoryWrapper(usernames: string[]) {\n  return (guid: string, index: number) => ({\n    guid,\n    name: usernames[index],\n    avatar: logo,\n  });\n}\n\nfunction chatInfoFactoryWrapper(chatNames: string[]) {\n  return (guid: string, index: number) => ({\n    guid,\n    name: chatNames[index],\n    logo,\n  });\n}\n\nfunction messagesFactoryWrapper(messages: string[], users: string[]) {\n  return () => messagesFactory(messages, users);\n}\n\nfunction mockStateAssembler() {\n  let userStorage: IHashTable<IUser> | null = null;\n  let chatStorage: IHashTable<IChatInfo> | null = null;\n  let messageStorage: IHashTable<IMessage[]> | null = null;\n  return async () => {\n    if (!(userStorage && chatStorage && messageStorage)) {\n      const dictionary = await import('./mockStateDictionary.json');\n      userStorage = storageAssembler<IUser>(\n        dictionary.usernames.map(() => uuid()),\n        userFactoryWrapper(dictionary.usernames),\n      );\n      chatStorage = storageAssembler<IChatInfo>(\n        dictionary.usernames.map(() => uuid()),\n        chatInfoFactoryWrapper(dictionary.chatNames),\n      );\n      messageStorage = storageAssembler<IMessage[]>(\n        Object.keys(chatStorage),\n        messagesFactoryWrapper(dictionary.messages, Object.keys(userStorage)),\n      );\n    }\n    return {\n      userStorage,\n      chatStorage,\n      messageStorage,\n    };\n  };\n}\n\n// (window as any)['mock'] = mockStateAssembler;\n\nexport default mockStateAssembler();\n","// eslint-disable-next-line import/prefer-default-export\r\nexport enum MessageTypes {\r\n  Service,\r\n  Text,\r\n}\r\n","enum LocaleStringFormats {\r\n  short = 'short',\r\n  numeric = 'numeric'\r\n}\r\n\r\nconst formatUnit = (n: number) => {\r\n  return n >= 10 ? n : `0${n}`;\r\n};\r\n\r\nconst parseDate = (d: Date | number) => {\r\n  const date = new Date(d);\r\n  return {\r\n    day: formatUnit(date.getDate()),\r\n    month: formatUnit(date.getMonth() + 1),\r\n    year: formatUnit(date.getFullYear()),\r\n    hours: formatUnit(date.getHours()),\r\n    minutes: formatUnit(date.getMinutes()),\r\n    seconds: formatUnit(date.getSeconds()),\r\n  };\r\n};\r\n\r\nconst getDate = (date: Date | number) => {\r\n  const { day, month, year } = parseDate(date);\r\n  return `${day}/${month}/${year}`;\r\n};\r\n\r\nconst getTime = (date: Date | number) => {\r\n  const { hours, minutes, seconds } = parseDate(date);\r\n  return `${hours}:${minutes}:${seconds}`;\r\n};\r\n\r\nconst removeTimeFromTimestamp = (d: number | Date) => {\r\n  const date = new Date(d);\r\n  return new Date(date.getFullYear(), date.getMonth(), date.getDate()).getTime();\r\n};\r\n\r\nconst getServiceMessage = (d: number | Date) => {\r\n  const date = new Date(d);\r\n  const message = date.toLocaleString('default', {\r\n    weekday: LocaleStringFormats.short,\r\n    month: LocaleStringFormats.short,\r\n    day: LocaleStringFormats.numeric,\r\n    year: LocaleStringFormats.numeric,\r\n  });\r\n  return message.replace(/,/g, '');\r\n};\r\n\r\nconst dateHelper = {\r\n  getDate,\r\n  getTime,\r\n  removeTimeFromTimestamp,\r\n  getServiceMessage,\r\n};\r\n\r\nexport default dateHelper;\r\n","import { SyntheticEvent } from 'react';\r\n\r\nimport { v4 as uuid } from 'uuid';\r\n\r\nimport { IChatInfo } from '../models/ichat-info';\r\nimport { IHashTable } from '../models/ihash-table';\r\nimport { IUser } from '../models/iuser';\r\nimport { IMessage, MessageList } from '../models/imessage';\r\nimport { IChatCardProps } from '../components/Chat/Card/IChatCardProps';\r\nimport { MessageTypes } from '../models/messageTypes';\r\nimport dateHelper from './dateHelper';\r\n\r\nconst mapChatInfoToChatCardProps = (\r\n  chats: IHashTable<IChatInfo>,\r\n  users: IHashTable<IUser>,\r\n  messages: IHashTable<IMessage[]>,\r\n  selected: string | null,\r\n  onChatSelected: (e: SyntheticEvent<HTMLElement, MouseEvent>) => void,\r\n): IChatCardProps[] => Object\r\n  .keys(chats)\r\n  .map((chatId) => {\r\n    const chat = chats[chatId];\r\n    const chatMessages = messages[chat.guid];\r\n    const lastMessage = chatMessages[chatMessages.length - 1];\r\n    const author = users[lastMessage.authorId];\r\n    return {\r\n      chat,\r\n      lastMessage,\r\n      author,\r\n      selected: selected === chat.guid,\r\n      onChatSelected,\r\n    };\r\n  });\r\n\r\nconst mapMessageToMessageWithAuthor = (\r\n  messageList: IMessage[],\r\n  users: IHashTable<IUser>,\r\n): MessageList => {\r\n  const dateSet: Set<number> = new Set();\r\n  return messageList.reduce((acc, m) => {\r\n    const timestamp = dateHelper.removeTimeFromTimestamp(m.timestamp);\r\n    if (!dateSet.has(timestamp)) {\r\n      dateSet.add(timestamp);\r\n      acc.push({\r\n        guid: uuid(),\r\n        timestamp: m.timestamp,\r\n        type: MessageTypes.Service,\r\n      });\r\n    }\r\n    acc.push({\r\n      guid: m.guid,\r\n      timestamp: m.timestamp,\r\n      content: m.content,\r\n      author: users[m.authorId],\r\n      type: MessageTypes.Text,\r\n    });\r\n    return acc;\r\n  }, [] as MessageList);\r\n};\r\n\r\nconst mapperHelper = {\r\n  mapChatInfoToChatCardProps,\r\n  mapMessageToMessageWithAuthor,\r\n};\r\n\r\nexport default mapperHelper;\r\n","import React, { FunctionComponent } from 'react';\r\n\r\nimport './Avatar.css';\r\n\r\ninterface Props {\r\n  src: string;\r\n  className: string;\r\n  alt?: string;\r\n}\r\n\r\nconst Avatar: FunctionComponent<Props> = ({ className, src, alt }: Props) => (\r\n  <div className={className}>\r\n    <img src={src} alt={alt} />\r\n  </div>\r\n);\r\n\r\nAvatar.defaultProps = {\r\n  alt: 'Avatar',\r\n};\r\n\r\nexport default Avatar;\r\n","const resources = {\r\n  chat: {\r\n    cardIcon: 'Chat icon',\r\n    messageAuthor: 'Author avatar',\r\n    serviceMessage: 'service-message',\r\n  },\r\n};\r\n\r\nexport default resources;\r\n","import React, { FunctionComponent } from 'react';\r\n\r\nimport './ChatCard.css';\r\n\r\nimport Avatar from '../../../shared/Avatar/Avatar';\r\nimport dateHelper from '../../../helpers/dateHelper';\r\nimport resources from '../../../resources';\r\nimport { IChatCardProps } from './IChatCardProps';\r\n\r\nconst ChatCard: FunctionComponent<IChatCardProps> = ({\r\n  chat,\r\n  author,\r\n  lastMessage,\r\n  selected,\r\n  onChatSelected,\r\n}: IChatCardProps) => {\r\n  const messageDate = dateHelper.getDate(lastMessage.timestamp);\r\n  return (\r\n    <button className=\"card-wrap button-reset\" data-guid={chat.guid} onClick={onChatSelected} type=\"button\">\r\n      <section className={`card ${selected ? 'selected' : ''}`}>\r\n        <section className=\"card__body\">\r\n          <Avatar className=\"card__logo\" src={chat.logo} alt={resources.chat.cardIcon} />\r\n          <section className=\"card__info\">\r\n            <div className=\"card__info__top\">\r\n              <p className=\"card__info__top__name\">{chat.name}</p>\r\n              <p className=\"card__info__top__date\">{messageDate}</p>\r\n            </div>\r\n            <div className=\"card__info__bottom\">\r\n              <p className=\"card__info__bottom__author\">\r\n                {author.name}\r\n                :\r\n              </p>\r\n              <p className=\"card__info__bottom__message\">{lastMessage.content}</p>\r\n            </div>\r\n          </section>\r\n        </section>\r\n      </section>\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default ChatCard;\r\n","import React from 'react';\r\n\r\nimport { IChatListProps } from './IChatListProps';\r\nimport ChatCard from '../Card/ChatCard';\r\n\r\nconst ChatList: React.FunctionComponent<IChatListProps> = ({ chatList: chats }: IChatListProps) => (\r\n  <section>\r\n    {chats.map((chat) => <ChatCard {...chat} key={chat.chat.guid} />)}\r\n  </section>\r\n);\r\n\r\nexport default ChatList;\r\n","import React, { ReactNode, FunctionComponent } from 'react';\r\n\r\nimport './ChatMessageWrapper.css';\r\n\r\ninterface ChatMessageWrapperProps {\r\n  className?: string;\r\n  children: ReactNode;\r\n}\r\n\r\nconst ChatMessageWrapper: FunctionComponent<ChatMessageWrapperProps> = ({\r\n  className,\r\n  children,\r\n}: ChatMessageWrapperProps) => (\r\n  <div className={className}>\r\n    {children}\r\n  </div>\r\n);\r\n\r\nChatMessageWrapper.defaultProps = {\r\n  className: 'message-wrap',\r\n};\r\n\r\nexport default ChatMessageWrapper;\r\n","import React, { FunctionComponent } from 'react';\r\nimport ChatMessageWrapper from '../MessageWrapper/ChatMessageWrapper';\r\n\r\nimport './ChatTextMessage.css';\r\nimport Avatar from '../../../shared/Avatar/Avatar';\r\nimport resources from '../../../resources';\r\nimport { IMessageWithAuthor } from '../../../models/imessage';\r\nimport dateHelper from '../../../helpers/dateHelper';\r\n\r\nconst ChatTextMessage: FunctionComponent<IMessageWithAuthor> = ({\r\n  author,\r\n  content,\r\n  timestamp,\r\n}: IMessageWithAuthor) => (\r\n  <ChatMessageWrapper>\r\n    <section style={{ position: 'relative' }} className=\"message\">\r\n      <Avatar className=\"message__icon\" src={author.avatar} alt={resources.chat.messageAuthor} />\r\n      <div className=\"message__body\">\r\n        <span className=\"message__author\">{author.name}</span>\r\n        <div className=\"message__content\">\r\n          <span>{content}</span>\r\n        </div>\r\n      </div>\r\n      <div className=\"message__time\">\r\n        <span className=\"message__created\">{dateHelper.getTime(timestamp)}</span>\r\n      </div>\r\n    </section>\r\n  </ChatMessageWrapper>\r\n);\r\n\r\n\r\nexport default ChatTextMessage;\r\n","import React, { FunctionComponent } from 'react';\r\nimport ChatMessageWrapper from '../MessageWrapper/ChatMessageWrapper';\r\n\r\nimport './ChatServiceMessage.css';\r\nimport { IServiceMessage } from '../../../models/imessage';\r\nimport dateHelper from '../../../helpers/dateHelper';\r\nimport resources from '../../../resources';\r\n\r\nconst ChatServiceMessage: FunctionComponent<IServiceMessage> = ({ timestamp }: IServiceMessage) => (\r\n  <ChatMessageWrapper className={resources.chat.serviceMessage}>\r\n    <span className=\"service-message__date\">{dateHelper.getServiceMessage(timestamp)}</span>\r\n  </ChatMessageWrapper>\r\n);\r\n\r\nexport default ChatServiceMessage;\r\n","import React, { FunctionComponent } from 'react';\r\n\r\nimport { MessageList } from '../../../models/imessage';\r\nimport ChatTextMessage from '../TextMessage/ChatTextMessage';\r\nimport { MessageTypes } from '../../../models/messageTypes';\r\nimport ChatServiceMessage from '../ServiceMessage/ChatServiceMessage';\r\n\r\nimport './ChatHistory.css';\r\n\r\ninterface Props {\r\n  messageList: MessageList;\r\n}\r\n\r\nconst ChatHistory: FunctionComponent<Props> = ({ messageList }: Props) => (\r\n  <div className=\"message-history\">\r\n    {messageList.map((message) => {\r\n      switch (message.type) {\r\n        case MessageTypes.Service:\r\n          return <ChatServiceMessage key={message.guid} {...message} />;\r\n        case MessageTypes.Text:\r\n        default:\r\n          return <ChatTextMessage key={message.guid} {...message} />;\r\n      }\r\n    })}\r\n  </div>\r\n);\r\n\r\nexport default ChatHistory;\r\n","import React, { SyntheticEvent, Component } from 'react';\r\n\r\nimport './MainLayout.css';\r\nimport { IChatInfo } from '../../models/ichat-info';\r\nimport { IUser } from '../../models/iuser';\r\nimport { IMessage } from '../../models/imessage';\r\nimport mockStateAssembler from '../../helpers/mockStateAssembler';\r\nimport mapperHelper from '../../helpers/mapperHelper';\r\nimport ChatList from '../../components/Chat/List/ChatList';\r\nimport { IHashTable } from '../../models/ihash-table';\r\nimport ChatHistory from '../../components/Chat/History/ChatHistory';\r\n\r\ninterface IMainLayoutState {\r\n  selectedChat: null | string;\r\n  chats: IHashTable<IChatInfo>;\r\n  users: IHashTable<IUser>;\r\n  messages: IHashTable<IMessage[]>;\r\n}\r\n\r\nexport default class MainLayout extends Component<{}, IMainLayoutState> {\r\n  constructor(props = {}) {\r\n    super(props);\r\n    this.state = {\r\n      selectedChat: null,\r\n      chats: {},\r\n      users: {},\r\n      messages: {},\r\n    };\r\n  }\r\n\r\n  async componentDidMount() {\r\n    const { userStorage, chatStorage, messageStorage } = await mockStateAssembler();\r\n    this.setState({\r\n      chats: chatStorage,\r\n      users: userStorage,\r\n      messages: messageStorage,\r\n    });\r\n  }\r\n\r\n  private onChatSelected = (e: SyntheticEvent<HTMLElement, MouseEvent>) => {\r\n    this.setState({\r\n      selectedChat: e.currentTarget.dataset.guid as string,\r\n    });\r\n  }\r\n\r\n  private getMessageList() {\r\n    const { selectedChat, messages, users } = this.state;\r\n    const selectedChatMessages = selectedChat ? messages[selectedChat] : [];\r\n    return mapperHelper.mapMessageToMessageWithAuthor(selectedChatMessages, users);\r\n  }\r\n\r\n  private getChatList() {\r\n    const {\r\n      chats, users,\r\n      messages, selectedChat,\r\n    } = this.state;\r\n    return mapperHelper.mapChatInfoToChatCardProps(\r\n      chats, users,\r\n      messages, selectedChat,\r\n      this.onChatSelected,\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const chatList = this.getChatList();\r\n    const messageList = this.getMessageList();\r\n    return (\r\n      <main className=\"layout\">\r\n        <aside className=\"layout__sidebar\">\r\n          <ChatList chatList={chatList} />\r\n        </aside>\r\n        <div className=\"layout__content\">\r\n          <ChatHistory messageList={messageList} />\r\n        </div>\r\n      </main>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\n\r\nimport './App.css';\r\n\r\nimport MainLayout from './core/MainLayout/MainLayout';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <MainLayout />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}